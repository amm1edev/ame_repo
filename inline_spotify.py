# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: inline_spotify
# Author: hikariatama
# Commands:
# .splayer
# ---------------------------------------------------------------------------------

__version__ = (2, 1, 1)

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://img.icons8.com/color/480/000000/playstation-buttons.png
# meta banner: https://mods.hikariatama.ru/badges/inline_spotify.jpg
# meta developer: @hikarimods
# scope: inline
# scope: hikka_only
# scope: hikka_min 1.5.3

import asyncio
import logging
import time
from math import ceil
from typing import Union

from telethon.tl.types import Message

from .. import loader, utils
from ..inline.types import InlineCall, InlineMessage

logger = logging.getLogger(__name__)


def create_bar(pb):
    try:
        percentage = ceil(pb["progress_ms"] / pb["item"]["duration_ms"] * 100)
        bar_filled = ceil(percentage / 10)
        bar_empty = 10 - bar_filled
        bar = "".join("‚îÄ" for _ in range(bar_filled))
        bar += "üûÜ"
        bar += "".join("‚îÄ" for _ in range(bar_empty))

        bar += (
            f' {pb["progress_ms"] // 1000 // 60:02}:{pb["progress_ms"] // 1000 % 60:02} /'
        )
        bar += (
            f' {pb["item"]["duration_ms"] // 1000 // 60:02}:{pb["item"]["duration_ms"] // 1000 % 60:02}'
        )
    except Exception:
        bar = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄüûÜ‚îÄ‚îÄ‚îÄ 0:00 / 0:00"

    return bar


@loader.tds
class InlineSpotifyMod(loader.Module):
    """EXTENSION for SpotifyNow mod, that allows you to send interactive player."""

    strings = {
        "name": "InlineSpotify",
        "input": "üéß Enter the track name",
        "search": "üîé Search",
        "listening_to": "I'm listening to",
        "download": "üì• Download",
    }

    strings_ru = {
        "input": "üéß –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞",
        "search": "üîé –ü–æ–∏—Å–∫",
        "_cmd_doc_splayer": (
            "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä Spotify (–∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!)"
        ),
        "_cls_doc": (
            "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –º–æ–¥—É–ª—è SpotifyNow, –ø–æ–∑–≤–æ–ª—è—é—â–µ–µ –≤—ã–∑–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä."
        ),
        "listening_to": "–°–µ–π—á–∞—Å —è —Å–ª—É—à–∞—é",
        "download": "üì• –°–∫–∞—á–∞—Ç—å",
    }

    strings_it = {
        "input": "üéß Inserisci il nome della traccia",
        "search": "üîé Cerca",
        "_cmd_doc_splayer": (
            "Invia un player Spotify interattivo (attivo per 5 minuti!)"
        ),
        "_cls_doc": (
            "Estensione per il modulo SpotifyNow, che consente di inviare un player"
            " interattivo."
        ),
        "listening_to": "Sto ascoltando",
        "download": "üì• Scarica",
    }

    strings_es = {
        "input": "üéß Introduzca el nombre de la pista",
        "search": "üîé Buscar",
        "_cmd_doc_splayer": (
            "Env√≠a un reproductor de Spotify interactivo (¬°activo durante 5 minutos!)"
        ),
        "_cls_doc": (
            "Extensi√≥n para el m√≥dulo SpotifyNow, que permite enviar un reproductor"
            " interactivo."
        ),
        "listening_to": "Estoy escuchando",
        "download": "üì• Descargar",
    }

    strings_uz = {
        "input": "üéß Ishora nomini kiriting",
        "search": "üîé Qidirish",
        "_cmd_doc_splayer": (
            "Qo'llab-quvvatlash uchun Spotify interaktiv oynasini yuboring (5 daqiqada"
            " faol!)"
        ),
        "_cls_doc": (
            "SpotifyNow moduli uchun kengaytma, interaktiv oynani yuborish mumkin."
        ),
        "listening_to": "Meni eshitib turaman",
        "download": "üì• Yuklab oling",
    }

    strings_tr = {
        "input": "üéß Par√ßanƒ±n adƒ±nƒ± girin",
        "search": "üîé Ara",
        "_cmd_doc_splayer": (
            "Etkile≈üimli bir Spotify oynatƒ±cƒ± g√∂nderir (5 dakika boyunca etkin!)"
        ),
        "_cls_doc": (
            "SpotifyNow mod√ºl√º eklentisi, etkile≈üimli bir oynatƒ±cƒ± g√∂ndermenizi saƒülar."
        ),
        "listening_to": "≈ûu anda dinliyorum",
        "download": "üì• ƒ∞ndir",
    }

    strings_kk = {
        "input": "üéß –¢–∞“õ—ã—Ä—ã–ø –∞—Ç–∞—É—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑",
        "search": "üîé —ñ–∑–¥–µ—É",
        "_cmd_doc_splayer": (
            "Spotify –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ –æ–π—ã–Ω–¥—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ (5 –º–∏–Ω—É—Ç—Ç–∞ –±–µ–ª—Å–µ–Ω–¥—ñ!)"
        ),
        "_cls_doc": (
            "SpotifyNow –º–æ–¥—É–ª—ñ “õ–æ—Å—ã–º—à–∞—Å—ã, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ –æ–π—ã–Ω–¥—ã –∂—ñ–±–µ—Ä—É–≥–µ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫"
            " –±–µ—Ä–µ–¥—ñ."
        ),
        "listening_to": "–ê“ì—ã–º–¥–∞ –º–∞“£—ã–∑–¥—ã –±–æ–ª–∞—Ç—ã–Ω–¥—ã“£—ã–∑–¥—ã –∫”©—Ä—É–¥—ñ“£—ñ–∑ –∫–µ—Ä–µ–∫",
        "download": "üì• –ñ“Ø–∫—Ç–µ—É",
    }

    strings_de = {
        "input": "üéß Geben Sie den Namen des Tracks ein",
        "search": "üîé Suche",
        "_cmd_doc_splayer": (
            "Sendet einen interaktiven Spotify-Player (aktiv f√ºr 5 Minuten!)"
        ),
        "_cls_doc": (
            "Erweiterung f√ºr das SpotifyNow-Modul, das es erm√∂glicht, einen"
            " interaktiven Player zu senden."
        ),
        "listening_to": "Ich h√∂re zu",
        "download": "üì• Herunterladen",
    }

    async def _reload_sp(self, once: bool = False):
        while True:
            self.sp = getattr(self.lookup("SpotifyMod"), "sp", None)
            if once:
                break

            await asyncio.sleep(5)

    async def client_ready(self):
        self.sp = None

        self._tasks = [asyncio.ensure_future(self._reload_sp())]
        await self._reload_sp(True)

        self._active_forms = []

    async def on_unload(self):
        for task in self._tasks:
            task.cancel()

    async def inline_close(self, call: InlineCall):
        if any(
            call.form.get("uid") == getattr(i, "unit_id", None)
            for i in self._active_forms
        ):
            self._active_forms.remove(
                next(
                    i
                    for i in self._active_forms
                    if call.form.get("uid") == getattr(i, "unit_id", None)
                )
            )

        await call.delete()

    async def sp_previous(self, call: InlineCall):
        self.sp.previous_track()
        await self.inline_iter(call, True)

    async def sp_next(self, call: InlineCall):
        self.sp.next_track()
        await self.inline_iter(call, True)

    async def sp_pause(self, call: InlineCall):
        self.sp.pause_playback()
        await self.inline_iter(call, True)

    async def sp_play(self, call: InlineCall):
        self.sp.start_playback()
        await self.inline_iter(call, True)

    async def sp_shuffle(self, call: InlineCall, state: bool):
        self.sp.shuffle(state)
        await self.inline_iter(call, True)

    async def sp_repeat(self, call: InlineCall, state: bool):
        self.sp.repeat(state)
        await self.inline_iter(call, True)

    async def sp_play_track(self, call: InlineCall, query: str):
        try:
            track = self.sp.track(query)
        except Exception:
            search = self.sp.search(q=query, type="track", limit=1)
            try:
                track = search["tracks"]["items"][0]
            except Exception:
                return

        self.sp.add_to_queue(track["id"])
        self.sp.next_track()

    async def inline_iter(
        self,
        call: Union[InlineCall, InlineMessage],
        once: bool = False,
        uid: str = False,
    ):
        try:
            if not uid:
                uid = getattr(call, "unit_id", call.form["id"])

            until = time.time() + 5 * 60
            while (
                any(uid == i.unit_id for i in self._active_forms)
                and until > time.time()
                or once
            ):
                pb = self.sp.current_playback()
                is_resuming = (
                    "actions" in pb
                    and "disallows" in pb["actions"]
                    and "resuming" in pb["actions"]["disallows"]
                    and pb["actions"]["disallows"]["resuming"]
                )

                try:
                    artists = [artist["name"] for artist in pb["item"]["artists"]]
                except Exception:
                    artists = []

                try:
                    track = pb["item"]["name"]
                    track_id = pb["item"]["id"]
                except Exception:
                    track = ""
                    track_id = ""

                full_name = f"{', '.join(artists)} - {track}"

                keyboard = [
                    [
                        (
                            {"text": "üîÅ", "callback": self.sp_repeat, "args": (False,)}
                            if pb["repeat_state"]
                            else {
                                "text": "üîÇ",
                                "callback": self.sp_repeat,
                                "args": (True,),
                            }
                        ),
                        {"text": "‚èÆ", "callback": self.sp_previous},
                        (
                            {"text": "‚è∏", "callback": self.sp_pause}
                            if is_resuming
                            else {"text": "‚ñ∂Ô∏è", "callback": self.sp_play}
                        ),
                        {"text": "‚è≠", "callback": self.sp_next},
                        (
                            {
                                "text": "‚Ü©Ô∏è",
                                "callback": self.sp_shuffle,
                                "args": (False,),
                            }
                            if pb["shuffle_state"]
                            else {
                                "text": "üîÄ",
                                "callback": self.sp_shuffle,
                                "args": (True,),
                            }
                        ),
                    ],
                    [
                        {
                            "text": self.strings("search"),
                            "input": self.strings("input"),
                            "handler": self.sp_play_track,
                        },
                        {
                            "text": self.strings("download"),
                            "callback": self._download,
                            "args": (full_name,),
                        },
                        {"text": "üîó Link", "url": f"https://song.link/s/{track_id}"},
                    ],
                    [{"text": "üö´ Close", "callback": self.inline_close}],
                ]

                text = (
                    f"üéß <b>{self.strings('listening_to')} {full_name}</b>\n<code>{create_bar(pb)}</code><a"
                    f" href='https://song.link/s/{track_id}'>\u206f</a>"
                )

                await call.edit(
                    text,
                    reply_markup=keyboard,
                    disable_web_page_preview=False,
                )

                if once:
                    break

                await asyncio.sleep(10)
        except Exception:
            logger.exception("BRUH")

    async def _download(self, call: InlineCall, track: str):
        await call.answer(self.strings("download"))
        await self.allmodules.commands["sfind"](
            await call.form["caller"].reply(
                f"<code>{self.get_prefix()}sfind {utils.escape_html(track)}</code>"
            )
        )

    @loader.command(
        ru_doc="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä Spotify (–∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!)",
        it_doc="Invia un player interattivo di Spotify (attivo per 5 minuti!)",
        de_doc="Sendet einen interaktiven Spotify-Player (aktiv f√ºr 5 Minuten!)",
        tr_doc="Etkin Spotify oynatƒ±cƒ± g√∂nderir (5 dakika boyunca aktif!)",
        uz_doc="Faol Spotify oynatuvchisini yuboradi (5 daqiqada aktiv!)",
        es_doc=(
            "Env√≠a un reproductor interactivo de Spotify (activo durante 5 minutos!)"
        ),
        kk_doc="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ Spotify –æ–π—ã–Ω–¥—ã—Å—ã–Ω –∂—ñ–±–µ—Ä–µ–¥—ñ (5 –º–∏–Ω—É—Ç—Ç–∞ –∞–∫—Ç–∏–≤!)",
    )
    async def splayer(self, message: Message):
        """Send interactive Spotify player (active only for 5 minutes!)"""
        form = await self.inline.form(
            "<b>üêª Bear with us, while player is loading...</b>", message=message
        )

        self._active_forms += [form]
        self._tasks += [asyncio.ensure_future(self.inline_iter(form))]
