# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: activists
# Author: hikariatama
# Commands:
# .activists
# ---------------------------------------------------------------------------------

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://static.dan.tatar/activists_icon.png
# meta banner: https://mods.hikariatama.ru/badges/activists.jpg
# meta developer: @hikarimods
# scope: hikka_only
# scope: hikka_min 1.4.0

import time
import typing

from telethon.tl.types import Chat, Message, User
from telethon.utils import get_display_name

from .. import loader, utils


@loader.tds
class ActivistsMod(loader.Module):
    """Looks for the most active users in chat"""

    strings = {
        "name": "Activists",
        "searching": (
            "<emoji document_id=5188311512791393083>üîé</emoji> <b>Looking for the most"
            " active users in chat...\nThis might take a while.</b>"
        ),
        "user": (
            '<emoji document_id=5314541718312328811>üë§</emoji> {}. <a href="{}">{}</a>:'
            " {} messages"
        ),
        "active": (
            "<emoji document_id=5312361425409156767>‚¨ÜÔ∏è</emoji> <b>The most active users"
            " in this chat:</b>\n\n{}\n<i>Request took: {}s</i>"
        ),
    }

    strings_ru = {
        "searching": (
            "<emoji document_id=5188311512791393083>üîé</emoji> <b>–ü–æ–∏—Å–∫ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö"
            " —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</b>"
        ),
        "active": (
            "<emoji document_id=5312361425409156767>‚¨ÜÔ∏è</emoji> <b>–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ"
            " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —á–∞—Ç–µ:</b>\n\n{}\n<i>–ü–æ–¥—Å—á–µ—Ç –∑–∞–Ω—è–ª: {}s</i>"
        ),
        "_cmd_doc_activists": (
            "[–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [-m <int>] - –ù–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞"
        ),
        "_cls_doc": "–ò—â–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞",
    }

    strings_de = {
        "searching": (
            "<emoji document_id=5188311512791393083>üîé</emoji> <b>Suche nach den"
            " aktivsten Benutzern im Chat...\nDies kann eine Weile dauern.</b>"
        ),
        "active": (
            "<emoji document_id=5312361425409156767>‚¨ÜÔ∏è</emoji> <b>Die aktivsten"
            " Benutzer in diesem Chat:</b>\n\n{}\n<i>Anfrage dauerte: {}s</i>"
        ),
        "_cmd_doc_activists": (
            "[Anzahl] [-m <int>] - Finde die aktivsten Benutzer im Chat"
        ),
        "_cls_doc": "Sucht nach den aktivsten Benutzern im Chat",
    }

    strings_hi = {
        "searching": (
            "<emoji document_id=5188311512791393083>üîé</emoji> <b>‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø"
            " ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§§‡§≤‡§æ‡§∂ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...\n‡§Ø‡§π ‡§•‡•ã‡§°‡§º‡§æ ‡§∏‡§Æ‡§Ø ‡§≤‡•á‡§®‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§</b>"
        ),
        "active": (
            "<emoji document_id=5312361425409156767>‚¨ÜÔ∏è</emoji> <b>‡§á‡§∏ ‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á"
            " ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ:</b>\n\n{}\n<i>‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§≤‡§ø‡§Ø‡§æ: {}s</i>"
        ),
        "_cmd_doc_activists": (
            "[‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ] [-m <int>] - ‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§§‡§≤‡§æ‡§∂ ‡§ï‡§∞‡•á‡§Ç"
        ),
        "_cls_doc": "‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§§‡§≤‡§æ‡§∂ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à",
    }

    strings_uz = {
        "searching": (
            "<emoji document_id=5188311512791393083>üîé</emoji> <b>Chatdagi eng faol"
            " foydalanuvchilarni qidirish...\nBu bir necha vaqt olishi mumkin.</b>"
        ),
        "active": (
            "<emoji document_id=5312361425409156767>‚¨ÜÔ∏è</emoji> <b>Ushbu chatdagi eng"
            " faol foydalanuvchilar:</b>\n\n{}\n<i>Talab: {}s</i>"
        ),
        "_cmd_doc_activists": (
            "[soni] [-m <int>] - Chatdagi eng faol foydalanuvchilarni qidirish"
        ),
        "_cls_doc": "Chatdagi eng faol foydalanuvchilarni qidiradi",
    }

    async def check_admin(
        self,
        chat: typing.Union[int, Chat],
        user_id: typing.Union[int, User],
    ) -> bool:
        try:
            return (await self._client.get_perms_cached(chat, user_id)).is_admin
        except Exception:
            return False

    async def activistscmd(self, message: Message):
        """[quantity] [-m <int>] - Find top active users in chat"""
        args = utils.get_args_raw(message)
        limit = None
        if "-m" in args:
            limit = int(
                "".join([lim for lim in args[args.find("-m") + 2 :] if lim.isdigit()])
            )
            args = args[: args.find("-m")].strip()

        quantity = int(args) if args.isdigit() else 15

        message = await utils.answer(message, self.strings("searching"))

        st = time.perf_counter()

        temp = {}
        async for msg in self._client.iter_messages(message.peer_id, limit=limit):
            user = getattr(msg, "sender_id", False)
            if not user:
                continue

            if user not in temp:
                temp[user] = 0

            temp[user] += 1

        stats = [
            user[0]
            for user in list(
                sorted(list(temp.items()), key=lambda x: x[1], reverse=True)
            )
        ]

        top_users = []
        for u in stats:
            if len(top_users) >= quantity:
                break

            if not await self.check_admin(message.peer_id, u):
                top_users += [(await self._client.get_entity(u), u)]

        top_users_formatted = [
            self.strings("user").format(
                i + 1, utils.get_link(user[0]), get_display_name(user[0]), temp[user[1]]
            )
            for i, user in enumerate(top_users)
        ]

        await utils.answer(
            message,
            self.strings("active").format(
                "\n".join(top_users_formatted), round(time.perf_counter() - st, 2)
            ),
        )
