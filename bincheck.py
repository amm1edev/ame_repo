# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: bincheck
# Author: hikariatama
# Commands:
# .bincheck
# ---------------------------------------------------------------------------------

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://static.dan.tatar/bincheck_icon.png
# meta banner: https://mods.hikariatama.ru/badges/bincheck.jpg
# meta developer: @hikarimods
# scope: hikka_only
# scope: hikka_min 1.2.10

import json

import requests
from telethon.tl.types import Message

from .. import loader, utils


@loader.tds
class BinCheckerMod(loader.Module):
    """Show bin info about card"""

    strings = {
        "name": "BinCheck",
        "args": (
            "<emoji document_id=5765086867154276106>üí≥</emoji> <b>To get bin info, you"
            " need to specify Bin of card (first 6 digits)</b>"
        ),
    }

    strings_ru = {
        "args": (
            "<emoji document_id=5765086867154276106>üí≥</emoji> <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è"
            " –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ë–ò–ù —É–∫–∞–∂–∏ –ø–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä –∫–∞—Ä—Ç—ã</b>"
        ),
        "_cmd_doc_bincheck": "[bin] - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ë–ò–ù",
        "_cls_doc": "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ë–ò–ù –æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–µ",
    }

    strings_de = {
        "args": (
            "<emoji document_id=5765086867154276106>üí≥</emoji> <b>Um die Bin-Info zu"
            " erhalten, musst du die Bin der Karte (erste 6 Ziffern) angeben</b>"
        ),
        "_cmd_doc_bincheck": "[bin] - Erhalte Bin-Info",
        "_cls_doc": "Zeigt Bin-Info √ºber eine Bankkarte an",
    }

    strings_hi = {
        "args": (
            "<emoji document_id=5765086867154276106>üí≥</emoji> <b>‡§¨‡§ø‡§® ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§"
            " ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Ü‡§™‡§ï‡•ã ‡§ï‡§æ‡§∞‡•ç‡§° ‡§ï‡§æ ‡§¨‡§ø‡§® (‡§™‡§π‡§≤‡•á 6 ‡§Ö‡§Ç‡§ï) ‡§®‡§ø‡§∞‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ</b>"
        ),
        "_cmd_doc_bincheck": "[bin] - ‡§¨‡§ø‡§® ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
        "_cls_doc": "‡§¨‡•à‡§Ç‡§ï ‡§ï‡§æ‡§∞‡•ç‡§° ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§ø‡§® ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç",
    }

    strings_uz = {
        "args": (
            "<emoji document_id=5765086867154276106>üí≥</emoji> <b>Bin haqida ma'lumot"
            " olish uchun, siz karta bin (birinchi 6 raqam) belgilashingiz kerak</b>"
        ),
        "_cmd_doc_bincheck": "[bin] - Bin haqida ma'lumot olish",
        "_cls_doc": "Bank karta haqida bin ma'lumotini ko'rsatish",
    }

    strings_tr = {
        "args": (
            "<emoji document_id=5765086867154276106>üí≥</emoji> <b>Bin bilgisi almak"
            " i√ßin, kartƒ±n bin (ilk 6 rakam) belirtmeniz gerekir</b>"
        ),
        "_cmd_doc_bincheck": "[bin] - Bin bilgisi al",
        "_cls_doc": "Banka kartƒ± hakkƒ±nda bin bilgisi g√∂ster",
    }

    @loader.unrestricted
    async def bincheckcmd(self, message: Message):
        """[bin] - Get card Bin info"""
        args = utils.get_args_raw(message)
        try:
            args = int(args)
            if args < 100000 or args > 999999:
                raise Exception()
        except Exception:
            await utils.answer(message, self.strings("args"))
            return

        async def bincheck(cc):
            try:
                ans = json.loads(
                    (
                        await utils.run_sync(
                            requests.get, f"https://bin-checker.net/api/{str(cc)}"
                        )
                    ).text
                )

                return (
                    "<b><u>Bin: %s</u></b>\n<code>\nüè¶ Bank: %s\nüåê Payment system: %s"
                    " [%s]\n‚ú≥Ô∏è Level: %s\n‚öõÔ∏è Country: %s </code>"
                    % (
                        cc,
                        ans["bank"]["name"],
                        ans["scheme"],
                        ans["type"],
                        ans["level"],
                        ans["country"]["name"],
                    )
                )
            except Exception:
                return "BIN data unavailable"

        await utils.answer(message, await bincheck(args))
