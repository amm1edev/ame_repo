# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU GPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: hyi
# Description: –ì–∞–≤–Ω–æ –∑–∞–ª—É–ø–Ω–æ–µ
# Author: KeyZenD
# Commands:
# .—Ö—É–π | .—Ö—É–π–Ω—è
# ---------------------------------------------------------------------------------


# -*- coding: utf-8 -*-

#   Friendly Telegram (telegram userbot)
#   Copyright (C) 2018-2020 The Authors

#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#   –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ t.me/keyzend
#   —Ç–≤–æ—è –º–∞–º–∞ —à–ª—é—Ö–∞
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.

import io
import logging
import random

from PIL import Image, ImageOps
from telethon.tl.types import DocumentAttributeFilename

from .. import loader, utils  # pylint: disable=relative-beyond-top-level

logger = logging.getLogger(__name__)


def register(cb):
    cb(–ï–±–∞–ª_—è_–≤_—Ä–æ—Ç_–≤–∞—à_–ø–µ–ø_8_Mod())


@loader.tds
class –ï–±–∞–ª_—è_–≤_—Ä–æ—Ç_–≤–∞—à_–ø–µ–ø_8_Mod(loader.Module):
    """–ì–∞–≤–Ω–æ –∑–∞–ª—É–ø–Ω–æ–µ"""

    strings = {"name": "–•—É–∏—Ñ–∏–∫–∞—Ç–æ—Ä"}

    async def client_ready(self, client, db):
        self.client = client

    @loader.sudo
    async def —Ö—É–πcmd(self, message):
        text = utils.get_args(message)
        if not text:
            reply = await message.get_reply_message()
            if not reply:
                await message.delete()
                return
            text = reply.raw_text.split()

        async def huify(word):
            word = word.lower().strip()
            vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
            rules = {
                "–∞": "—è",
                "–æ": "—ë",
                "—É": "—é",
                "—ã": "–∏",
                "—ç": "–µ",
            }
            for letter in word:
                if letter in vowels:
                    if letter in rules:
                        word = rules[letter] + word[1:]
                    break
                else:
                    word = word[1:]
            return "–•—É" + word if word else "–•—É–π"

        out = []
        for word in text:
            —Ö—É–π = await huify(word)
            out.append(—Ö—É–π)
        await message.edit(" ".join(out))

    async def —Ö—É–π–Ω—ècmd(self, message):
        text = utils.get_args(message)
        if not text:
            reply = await message.get_reply_message()
            if not reply:
                await message.delete()
                return
            text = reply.raw_text.split()

        async def huify(word):
            word = word.lower().strip()
            vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
            rules = {
                "–∞": "—è",
                "–æ": "—ë",
                "—É": "—é",
                "—ã": "–∏",
                "—ç": "–µ",
            }
            for letter in word:
                if letter in vowels:
                    if letter in rules:
                        word = rules[letter] + word[1:]
                    break
                else:
                    word = word[1:]
            return "–•—É" + word if word else "–•—É–π"

        out = []
        for word in text:
            —Ö—É–π = await huify(word)
            out.append(f"{word}-{—Ö—É–π}")
        await message.edit(" ".join(out))
