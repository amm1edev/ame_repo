# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîì Not licensed.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: versteck
# Author: GD-alt
# Commands:
# .newv | .delv     | .newi        | .deli        | .testvconn
# .vml  | .updateot | .vcachefetch | .vcacheclear
# ---------------------------------------------------------------------------------

# `7MMM.     ,MMF'`7MMM.     ,MMF'   `7MMM.     ,MMF'              `7MM
# MMMb    dPMM    MMMb    dPMM       MMMb    dPMM                  MM
# M YM   ,M MM    M YM   ,M MM       M YM   ,M MM  ,pW"Wq.    ,M""bMM  ,pP"Ybd
# M  Mb  M' MM    M  Mb  M' MM       M  Mb  M' MM 6W'   `Wb ,AP    MM  8I   `"
# M  YM.P'  MM    M  YM.P'  MM mmmmm M  YM.P'  MM 8M     M8 8MI    MM  `YMMMa.
# M  `YM'   MM    M  `YM'   MM       M  `YM'   MM YA.   ,A9 `Mb    MM  L.   I8
# .JML. `'  .JMML..JML. `'  .JMML.   .JML. `'  .JMML.`Ybmd9'   `Wbmd"MML.M9mmmP'
#
# (c) 2023 ‚Äî licensed under Apache 2.0 ‚Äî https://www.apache.org/licenses/LICENSE-2.0
# meta developer: @mm_mods
# meta pic: https://img.icons8.com/emoji/256/locked-with-pen.png
import logging
import os

import requests
from hikka import loader, utils
from telethon.tl.patched import Message

logger = logging.getLogger(__name__)
URL = "https://versteck-1-j8565404.deta.app"


# noinspection PyCallingNonCallable
@loader.tds
class VersteckMod(loader.Module):
    """Work with VersteckAPI ‚Äî download modules if you are common user, grant permissions for downloading if you are
    developer!"""

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "dev_name",
                "",
                lambda: "Name of Versteck to use (if you are developer)",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "dev_password",
                "",
                lambda: "Password of Versteck to use (if you are developer)",
                validator=loader.validators.Hidden(loader.validators.Hidden()),
            ),
        )

    strings = {
        "name": "Versteck",
        "password?!": "üî¥ <b>Password is incorrect!</b>",
        "args?": "üî¥ <b>Not enough arguments!</b>",
        "name_already_exists": "üî¥ <b>Name already exists!</b>",
        "token_del_suc": "üü¢ <b>Token deleted successfully!</b>",
        "token_not_found": "üü° <b>Token not found!</b>",
        "versteck_not_found": "üü° <b>Versteck not found!</b>",
        "in-token_wrong": "üî¥ <b>In-token is incorrect!</b>",
        "connection_succesfull": "üîµ <b>Connection succesfull!</b>",
        "permission_denied": (
            "üü† <b>Permission denied!</b>\nIt means that credentials were correct, but"
            " you don't have permissions to download this file."
        ),
        "file_not_found": (
            "üü† <b>File not found!</b>\nIt means that credentials were correct, but file"
            " was not found."
        ),
        "not_a_file": (
            "üü† <b>Not a file!</b>\nIt means that credentials were correct, but this is"
            " not a file."
        ),
        "rights_of_unauthorized_insuffucient": (
            "üü† <b>Rights of unauthorized user are insufficient!</b>\nIt means "
            "that Versteck exists, but you can't download this file without "
            "authorization."
        ),
        "no_unauthorized": (
            "üî¥ <b>Unauthorized access for this Versteck is disabled!</b>"
        ),
        "out-token_invalid": (
            "‚ö´ <b>Out-token is invalid!</b>\nIt means that credentials were correct,"
            " but out-token (the token, that Versteck uses to download files) is"
            " invalid. Contact the developer of module you trying to download."
        ),
        "out-token_updated": "üü¢ <b>Out-token was updated successfully!</b>",
        "versteck_created": (
            "üü¢ <b>Versteck was created successfully!</b>\nPassword:"
            " <code>{}</code>\nName: <code>{}</code>\nUAP: <code>{}</code>"
        ),
        "versteck_deleted": "üü¢ <b>Versteck was deleted successfully!</b>",
        "in-token_created": (
            "üü¢ <b>In-token was created successfully!</b>\nToken:"
            " <code>{}</code>\nRestrictions: <code>{}</code>"
        ),
        "in-token_deleted": "üü¢ <b>In-token was deleted successfully!</b>",
        "module_result": "üü¢ <b>Module <code>{}</code> was {} successfully!</b>",
        "local_file_not_found": "üî¥ <b>This file isn't presenting in cache!</b>",
        "cache_cleared": "üü¢ <b>Cache was cleared successfully!</b>",
        "cache_contents": "üíæ <b>Cache contents:</b>\n",
        "cache_empty": "üü† <b>Cache is empty!</b>",
        "send_action:dwnld": "downloaded",
        "send_action:frmcch": "extracted from cache",
    }

    strings_ru = {
        "name": "Versteck",
        "password?!": "üî¥ <b>–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω!</b>",
        "args?": "üî¥ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!</b>",
        "name_already_exists": "üî¥ <b>–ò–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>",
        "token_del_suc": "üü¢ <b>–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!</b>",
        "token_not_found": "üî¥ <b>–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>",
        "versteck_not_found": "üî¥ <b>Versteck-–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>",
        "in-token_wrong": "üî¥ <b>–í—Ö–æ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–µ–Ω!</b>",
        "connection_succesfull": "üîµ <b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>",
        "permission_denied": (
            "üü† <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!</b>\n–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–µ—Ä–Ω—ã, –Ω–æ —É –≤–∞—Å"
            " –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞."
        ),
        "file_not_found": (
            "üü† <b>–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–µ—Ä–Ω—ã, –Ω–æ —Ñ–∞–π–ª –Ω–µ"
            " –±—ã–ª –Ω–∞–π–¥–µ–Ω."
        ),
        "not_a_file": (
            "üü† <b>–≠—Ç–æ –Ω–µ —Ñ–∞–π–ª!</b>\n–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–µ—Ä–Ω—ã, –Ω–æ —ç—Ç–æ –Ω–µ"
            " —Ñ–∞–π–ª."
        ),
        "rights_of_unauthorized_insuffucient": (
            "üü† <b>–ü—Ä–∞–≤–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã!</b>\n–≠—Ç–æ "
            "–æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ Versteck-–∏—Å—Ç–æ—á–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ—Ç "
            "—Ñ–∞–π–ª –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        ),
        "no_unauthorized": (
            "üî¥ <b>–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —ç—Ç–æ–≥–æ Versteck-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç–∫–ª—é—á—ë–Ω!</b>"
        ),
        "out-token_invalid": (
            "‚ö´ <b>–í–Ω–µ—à–Ω–∏–π —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–µ–Ω!</b>\n–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–µ—Ä–Ω—ã, –Ω–æ"
            " –≤–Ω–µ—à–Ω–∏–π —Ç–æ–∫–µ–Ω (—Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Versteck –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤)"
            " –Ω–µ–≤–µ—Ä–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –º–æ–¥—É–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–∫–∞—á–∞—Ç—å."
        ),
        "out-token_updated": "üü¢ <b>–í–Ω–µ—à–Ω–∏–π —Ç–æ–∫–µ–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω!</b>",
        "versteck_created": (
            "üü¢ <b>Versteck-–∏—Å—Ç–æ—á–Ω–∏–∫ –±—ã–ª —Å–æ–∑–¥–∞–Ω!</b>\n–ü–∞—Ä–æ–ª—å: <code>{}</code>\n–ò–º—è:"
            " <code>{}</code>\n–ê–ü–£: <code>{}</code>"
        ),
        "versteck_deleted": "üü¢ <b>Versteck-–∏—Å—Ç–æ—á–Ω–∏–∫ –±—ã–ª —É–¥–∞–ª—ë–Ω!</b>",
        "in-token_created": (
            "üü¢ <b>–í—Ö–æ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω!</b>\n–¢–æ–∫–µ–Ω: <code>{}</code>\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"
            " <code>{}</code>"
        ),
        "in-token_deleted": "üü¢ <b>–í—Ö–æ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω!</b>",
        "module_result": "üü¢ <b>–ú–æ–¥—É–ª—å <code>{}</code> –±—ã–ª —É—Å–ø–µ—à–Ω–æ {}!</b>",
        "local_file_not_found": "üî¥ <b>–≠—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ –∫—ç—à–µ!</b>",
        "cache_cleared": "üü¢ <b>–ö—ç—à –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!</b>",
        "cache_contents": "üíæ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞:</b>\n",
        "cache_empty": "üü† <b>–ö—ç—à –ø—É—Å—Ç!</b>",
        "send_action:dwnld": "—Å–∫–∞—á–∞–Ω",
        "send_action:frmcch": "–∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ –∫—ç—à–∞",
        "_cls_doc": (
            "–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VersteckAPI ‚Äî —Å–∫–∞—á–∏–≤–∞–π –º–æ–¥—É–ª–∏, –µ—Å–ª–∏ —Ç—ã –æ–±—ã—á–Ω—ã–π"
            " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–∞–≤–∞–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ —Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!"
        ),
        "_cmd_doc_newv": "–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π Versteck-–∏—Å—Ç–æ—á–Ω–∏–∫.",
        "_cmd_doc_delv": "–£–¥–∞–ª—è–µ—Ç Versteck-–∏—Å—Ç–æ—á–Ω–∏–∫.",
        "_cmd_doc_newi": "–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –≤—Ö–æ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω.",
        "_cmd_doc_deli": "–£–¥–∞–ª—è–µ—Ç –≤—Ö–æ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω.",
        "_cmd_doc_testv": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Versteck.",
        "_cmd_doc_vml": "–°–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å –∏–∑ Versteck-–∏—Å—Ç–æ—á–Ω–∏–∫–∞.",
        "_cmd_doc_updateot": "–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π —Ç–æ–∫–µ–Ω.",
        "_cmd_doc_vcacheclear": "–û—á–∏—â–∞–µ—Ç –∫—ç—à.",
        "_cmd_doc_vcachefetch": (
            "–û–±—ã—Å–∫–∏–≤–∞–µ—Ç –∫—ç—à –∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π"
            " —Ñ–∞–π–ª."
        ),
    }

    strings_de = {
        "name": "Versteck",
        "password?!": "üî¥ <b>Passwort ist falsch!</b>",
        "args?": "üî¥ <b>Nicht genug Argumente!</b>",
        "name_already_exists": "üî¥ <b>Name existiert bereits!</b>",
        "token_del_suc": "üü¢ <b>Token erfolgreich gel√∂scht!</b>",
        "token_not_found": "üî¥ <b>Token nicht gefunden!</b>",
        "versteck_not_found": "üî¥ <b>Versteck nicht gefunden!</b>",
        "in-token_wrong": "üî¥ <b>In-Token ist falsch!</b>",
        "connection_succesfull": "üîµ <b>Verbindung erfolgreich hergestellt!</b>",
        "permission_denied": (
            "üü† <b>Zugriff verweigert!</b>\nDas bedeutet, dass die Anmeldeinformationen"
            " korrekt waren, Sie jedoch keine Berechtigung zum Herunterladen dieser"
            " Datei haben."
        ),
        "file_not_found": (
            "üü† <b>Datei nicht gefunden!</b>\nDas bedeutet, dass die"
            " Anmeldeinformationen korrekt waren, die Datei jedoch nicht gefunden"
            " wurde."
        ),
        "not_a_file": (
            "üü† <b>Keine Datei!</b>\nDas bedeutet, dass die Anmeldeinformationen korrekt"
            " waren, dies jedoch keine Datei ist."
        ),
        "rights_of_unauthorized_insuffucient": (
            "üü† <b>Die Rechte des nicht autorisierten Benutzers sind unzureichend!</b>\n"
            "Das bedeutet, dass der Versteck vorhanden ist, Sie jedoch "
            "diese Datei ohne Autorisierung nicht herunterladen k√∂nnen."
        ),
        "no_unauthorized": (
            "üî¥ <b>Der nicht autorisierte Zugriff f√ºr diese Versteck ist"
            " deaktiviert!</b>"
        ),
        "out-token_invalid": (
            "‚ö´ <b>Aus-Token ist ung√ºltig!</b>\nDas bedeutet, dass die"
            " Anmeldeinformationen korrekt waren, aber der Aus-Token (der Token, den"
            " Versteck zum Herunterladen von Dateien verwendet) ist ung√ºltig. Wenden"
            " Sie sich an den Entwickler des Moduls, das Sie herunterladen m√∂chten."
        ),
        "out-token_updated": "üü¢ <b>Aus-Token wurde erfolgreich aktualisiert!</b>",
        "versteck_created": (
            "üü¢ <b>Versteck erfolgreich erstellt!</b>\nPasswort: <code>{}</code>\nName:"
            " <code>{}</code>\nNAP: <code>{}</code>"
        ),
        "versteck_deleted": "üü¢ <b>Versteck erfolgreich gel√∂scht!</b>",
        "in-token_created": (
            "üü¢ <b>In-Token erfolgreich erstellt!</b>\nToken:"
            " <code>{}</code>\nEinschr√§nkungen: <code>{}</code>"
        ),
        "in-token_deleted": "üü¢ <b>In-Token erfolgreich gel√∂scht!</b>",
        "module_result": "üü¢ <b>Modul <code>{}</code> erfolgreich {}!</b>",
        "local_file_not_found": "üî¥ <b>Diese Datei ist nicht im Cache!</b>",
        "cache_cleared": "üü¢ <b>Cache erfolgreich gel√∂scht!</b>",
        "cache_contents": "üíæ <b>Cache-Inhalt:</b>\n",
        "cache_empty": "üü† <b>Der Cache ist leer!</b>",
        "send_action:dwnld": "heruntergeladen",
        "send_action:frmcch": "aus dem Cache extrahiert",
        "_cls_doc": (
            "Modul f√ºr VersteckAPI ‚Äî lade Module herunter, wenn du ein normaler"
            " Benutzer bist, gib Berechtigungen f√ºr Herunterladungen, wenn du ein"
            " Entwickler bist!"
        ),
        "_cmd_doc_newv": "Erstellt einen neuen Versteck.",
        "_cmd_doc_delv": "L√∂scht einen Versteck.",
        "_cmd_doc_newi": "Erstellt einen neuen In-Token.",
        "_cmd_doc_deli": "L√∂scht einen In-Token.",
        "_cmd_doc_testv": "√úberpr√ºft die Verbindung mit Versteck.",
        "_cmd_doc_vml": "L√§dt ein Modul aus einem Versteck herunter.",
        "_cmd_doc_updateot": "Aktualisiert den Aus-Token.",
        "_cmd_doc_vcacheclear": "Leert den Cache.",
        "_cmd_doc_vcachefetch": (
            "Durchsucht den Cache und sendet, wenn ein Dateiname √ºbergeben wird, die "
            "entsprechende Datei."
        ),
    }

    async def newvcmd(self, m: Message):
        """Create new Versteck."""
        args = utils.get_args_raw(m)

        if not args:
            return await utils.answer(m, self.strings("args?"))

        try:
            username, repo, token, name, unauthorized_rule = args.split()
        except ValueError:
            return await utils.answer(m, self.strings("args?"))

        data = {
            "username": username,
            "repo": repo,
            "out_token": token,
            "name": name,
            "unauthorized_path": unauthorized_rule,
        }

        res = requests.post(f"{URL}/new/versteck", json=data).json()
        logging.error(f"{URL}/new/versteck")
        logging.error(res)
        if res["result"] == "Name already exists":
            return await utils.answer(m, self.strings("name_already_exists"))
        return await utils.answer(
            m,
            self.strings("versteck_created").format(
                res["password"], name, unauthorized_rule
            ),
        )

    async def delvcmd(self, m: Message):
        """Delete Versteck."""
        password = self.config["dev_password"]
        name = self.config["dev_name"]

        if not password or not name:
            return await utils.answer(m, self.strings("args?"))

        res = requests.delete(
            f"{URL}/versteck/{name}", params={"password": password}
        ).json()
        if res["result"] == "Versteck not found":
            return await utils.answer(m, self.strings("versteck_not_found"))
        if res["result"] == "Wrong password":
            return await utils.answer(m, self.strings("password?!"))

        return await utils.answer(m, self.strings("versteck_deleted"))

    async def newicmd(self, m: Message):
        """Create new in-token."""
        args = utils.get_args_raw(m)

        if args:
            regex = args
        else:
            regex = ""

        password = self.config["dev_password"]
        name = self.config["dev_name"]

        if not password or not name:
            return await utils.answer(m, self.strings("args?"))

        data = {"password": password, "name": name, "grant_to": regex}

        res = requests.post(f"{URL}/new/in-token", json=data).json()
        if res["result"] == "Versteck not found":
            return await utils.answer(m, self.strings("versteck_not_found"))
        if res["result"] == "Wrong password":
            return await utils.answer(m, self.strings("password?!"))

        return await utils.answer(
            m, self.strings("in-token_created").format(res["in_token"], regex or 0)
        )

    async def delicmd(self, m: Message):
        """Delete in-token."""
        args = utils.get_args_raw(m)

        if not args:
            return await utils.answer(m, self.strings("args?"))

        token = args
        name = self.config["dev_name"]
        password = self.config["dev_password"]

        res = requests.delete(
            f"{URL}/in-token/{name}", params={"in_token": token, "password": password}
        ).json()
        if res["result"] == "Versteck not found":
            return await utils.answer(m, self.strings("versteck_not_found"))
        if res["result"] == "Wrong password":
            return await utils.answer(m, self.strings("password?!"))
        if res["result"] == "Token not found":
            return await utils.answer(m, self.strings("token_not_found"))

        return await utils.answer(m, self.strings("in-token_deleted"))

    async def testvconncmd(self, m: Message):
        """Test Versteck connection."""
        args = utils.get_args_raw(m)

        if not args:
            return await utils.answer(m, self.strings("args?"))

        try:
            name, in_token = args.split(":")
        except ValueError:
            return await utils.answer(m, self.strings("args?"))

        res = requests.get(f"{URL}/versteck/{name}/{in_token}/").json()
        if res["result"] == "Versteck not found":
            return await utils.answer(m, self.strings("versteck_not_found"))
        elif res["result"] == "Wrong in-token":
            return await utils.answer(m, self.strings("in-token_wrong"))
        elif res["result"] == "Out-token is invalid":
            return await utils.answer(m, self.strings("out-token_invalid"))

        return await utils.answer(m, self.strings("connection_succesfull"))

    async def vmlcmd(self, m: Message):
        """Download module from Versteck."""
        args = utils.get_args_raw(m)

        if not os.path.exists("versteck_downloads"):
            os.mkdir("versteck_downloads")

        if not args:
            return await utils.answer(m, self.strings("args?"))

        try:
            auth, path = args.split(" ")
        except ValueError:
            return await utils.answer(m, self.strings("args?"))

        try:
            name, in_token = auth.split(":")
        except ValueError:
            return await utils.answer(m, self.strings("args?"))

        data = {"name": name, "in_token": in_token, "path": path}

        res = requests.post(f"{URL}/versteck/file/", json=data)

        try:
            res = res.json()
        except Exception as e:
            logging.error(res)

        if res["result"] == "Versteck not found":
            return await utils.answer(m, self.strings("versteck_not_found"))
        elif res["result"] == "Wrong in-token":
            return await utils.answer(m, self.strings("in-token_wrong"))
        elif res["result"] == "File not found":
            return await utils.answer(m, self.strings("file_not_found"))
        elif res["result"] == "Permission denied":
            return await utils.answer(m, self.strings("permission_denied"))
        elif res["result"] == "Not a file":
            return await utils.answer(m, self.strings("not_a_file"))
        elif res["result"] == "Out-token is invalid":
            return await utils.answer(m, self.strings("out-token_invalid"))
        elif res["result"] == "Unauthorized access is not allowed":
            return await utils.answer(m, self.strings("no_unauthorized"))
        elif res["result"] == "Unauthorized access is not allowed here":
            return await utils.answer(
                m, self.strings("rights_of_unauthorized_insuffucient")
            )

        with open(f"versteck_downloads/{path.split('/')[-1]}", "w") as f:
            f.write(res["result"])

        await m.client.send_file(
            m.to_id,
            f"versteck_downloads/{path.split('/')[-1]}",
            caption=self.strings("module_result").format(
                path.split("/")[-1], self.strings("send_action:dwnld")
            ),
        )
        return await m.delete()

    async def updateotcmd(self, m: Message):
        """Update out-token."""
        args = utils.get_args_raw(m)

        if not args:
            return await utils.answer(m, self.strings("args?"))

        out_token = args

        password = self.config["dev_password"]
        name = self.config["dev_name"]

        data = {
            "new_token": out_token,
        }

        res = requests.post(
            f"{URL}/update/{name}", params={"password": password}, json=data
        ).json()

        if res["result"] == "Versteck not found":
            return await utils.answer(m, self.strings("versteck_not_found"))
        elif res["result"] == "Wrong password":
            return await utils.answer(m, self.strings("password?!"))

        return await utils.answer(m, self.strings("out-token_updated"))

    async def vcachefetchcmd(self, m: Message):
        """Fetch local cache and return a file if found."""
        args = utils.get_args_raw(m)

        if not args:
            to_send = self.strings("cache_contents") + "\n"
            # Check is there's any files in cache
            if not os.listdir("versteck_downloads"):
                return await utils.answer(m, self.strings("cache_empty"))

            for file in os.listdir("versteck_downloads"):
                to_send += f"‚âª <code>{file}</code>\n"

            return await utils.answer(m, to_send)

        file = args

        try:
            with open(f"versteck_downloads/{file}", "r") as _:
                pass
        except FileNotFoundError:
            return await utils.answer(m, self.strings("local_file_not_found"))

        await m.client.send_file(
            m.to_id,
            f"versteck_downloads/{file}",
            caption=self.strings("module_result").format(
                file, self.strings("send_action:frmcch")
            ),
        )
        return await m.delete()

    async def vcacheclearcmd(self, m: Message):
        """Clear local cache."""
        for file in os.listdir("versteck_downloads"):
            os.remove(f"versteck_downloads/{file}")

        return await utils.answer(m, self.strings("cache_cleared"))
