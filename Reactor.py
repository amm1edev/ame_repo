# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîì Not licensed.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: Reactor
# Author: GD-alt
# Commands:
# .rshorthand | .dshorthand | .shorthands | .react
# ---------------------------------------------------------------------------------

# `7MMM.     ,MMF'`7MMM.     ,MMF'   `7MMM.     ,MMF'              `7MM
# MMMb    dPMM    MMMb    dPMM       MMMb    dPMM                  MM
# M YM   ,M MM    M YM   ,M MM       M YM   ,M MM  ,pW"Wq.    ,M""bMM  ,pP"Ybd
# M  Mb  M' MM    M  Mb  M' MM       M  Mb  M' MM 6W'   `Wb ,AP    MM  8I   `"
# M  YM.P'  MM    M  YM.P'  MM mmmmm M  YM.P'  MM 8M     M8 8MI    MM  `YMMMa.
# M  `YM'   MM    M  `YM'   MM       M  `YM'   MM YA.   ,A9 `Mb    MM  L.   I8
# .JML. `'  .JMML..JML. `'  .JMML.   .JML. `'  .JMML.`Ybmd9'   `Wbmd"MML.M9mmmP'
#
# (c) 2023 ‚Äî licensed under Apache 2.0 ‚Äî https://www.apache.org/licenses/LICENSE-2.0

# meta pic: https://img.icons8.com/stickers/344/diamond-heart.png
# meta developer: @mm_mods

__version__ = "1.0.0"

import asyncio
import logging

import telethon as tt
from telethon.tl.types import Message

from .. import loader, utils

logger = logging.getLogger(__name__)


# Dict with all public reactions of Telegram in format {name: emoji}
edb = {
    "like": "üëç",
    "dislike": "üëé",
    "love": "‚ù§Ô∏è",
    "fire": "üî•",
    "haround": "ü•∞",
    "clap": "üëè",
    "laugh": "üòÅ",
    "suspect": "ü§î",
    "mindblown": "ü§Ø",
    "horror": "üò±",
    "angry": "ü§¨",
    "sad": "üò¢",
    "fest": "üéâ",
    "stareyes": "ü§©",
    "womit": "ü§Æ",
    "poop": "üí©",
    "pray": "üôè",
    "ok": "üëå",
    "peace": "üïäÔ∏è",
    "clown": "ü§°",
    "tired": "ü•±",
    "drunk": "ü•¥",
    "hearteyes": "üòç",
    "whale": "üê≥",
    "flameheart": "‚ù§Ô∏è\u200düî•",
    "moon": "üåö",
    "hotdog": "üå≠",
    "100": "üíØ",
    "laughcry": "üòÇ",
    "220": "‚ö°",
    "banana": "üçå",
    "cup": "üèÜ",
    "brokenheart": "üíî",
    "hm": "ü§®",
    "what": "üòê",
    "berry": "üçì",
    "bottle": "üçæ",
    "kiss": "üíã",
    "fuck": "üñï",
    "devil": "üòà",
}


@loader.tds
class ReactTorMod(loader.Module):
    """Reacts manager."""

    strings = {
        "name": "Reactor",
        "reply?": "üü® <b>You need to reply a message.</b>",
        "name?": "üü® <b>You need to specify a name.</b>",
        "emoji?": "üü® <b>You need to specify an emoji.</b>",
        "name?!": "üü• <b>Invalid name.</b>",
        "emoji?!": "üü• <b>Invalid emoji.</b>",
        "done": "üü© <b>Done.</b>",
        "shorthand_done": "üü© <b>Created shorthand ¬´{}¬ª for {}.</b>",
    }

    strings_ru = {
        "reply?": "üü® <b>–¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>",
        "name?": "üü® <b>–¢–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è.</b>",
        "emoji?": "üü® <b>–¢–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —ç–º–æ–¥–∑–∏.</b>",
        "name?!": "üü• <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è.</b>",
        "emoji?!": "üü• <b>–ù–µ–≤–µ—Ä–Ω—ã–π —ç–º–æ–¥–∑–∏.</b>",
        "done": "üü© <b>–ì–æ—Ç–æ–≤–æ.</b>",
        "shorthand_done": "üü© <b>–°–æ–∑–¥–∞–Ω —è—Ä–ª—ã–∫ ¬´{}¬ª –¥–ª—è {}.</b>",
        "_cls_doc": "–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∞–∫—Ü–∏–π.",
        "_cmd_doc_rshorthand": "–°–æ–∑–¥–∞—Ç—å —è—Ä–ª—ã–∫ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏.\n/rshorthand <–∏–º—è> <—ç–º–æ–¥–∑–∏>",
        "_cmd_doc_dshorthand": "–£–¥–∞–ª–∏—Ç—å —è—Ä–ª—ã–∫ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏.\n/dshorthand <–∏–º—è>",
        "_cmd_doc_shorthands": "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —è—Ä–ª—ã–∫–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π.",
        "_cmd_doc_react": "–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n/react <–∏–º—è>",
    }

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        if not self.get("shorthands", False):
            self.set("shorthands", {})

    async def rshorthandcmd(self, m: Message):
        """Add a shorthand for a reaction.
        /rshorthand <name> <emoji>"""
        args = utils.get_args_raw(m)
        if not args:
            return await utils.answer(m, self.strings("name?"))
        args = args.split(" ")
        if len(args) < 2:
            return await utils.answer(m, self.strings("emoji?"))
        name = args[0]
        emoji = args[1]
        if name in edb.keys():
            return await utils.answer(m, self.strings("name?!"))
        if emoji not in edb.values() and not isinstance(
            m.entities[0], tt.tl.types.MessageEntityCustomEmoji
        ):
            return await utils.answer(m, self.strings("emoji?!"))
        shorthands = self.get("shorthands", {})
        if name in shorthands.keys():
            return await utils.answer(m, self.strings("name?!"))
        if isinstance(m.entities[0], tt.tl.types.MessageEntityCustomEmoji):
            emoji = m.entities[0].document_id
        shorthands[name] = emoji
        self.set("shorthands", shorthands)
        await utils.answer(m, self.strings("shorthand_done").format(name, emoji))

    async def dshorthandcmd(self, m: Message):
        """Delete a shorthand for a reaction.
        /dshorthand <name>"""
        args = utils.get_args_raw(m)
        if not args:
            return await utils.answer(m, self.strings("name?"))
        shorthands = self.get("shorthands", {})
        if args not in shorthands.keys():
            return await utils.answer(m, self.strings("name?!"))
        del shorthands[args]
        self.set("shorthands", shorthands)
        await utils.answer(m, self.strings("done"))

    async def shorthandscmd(self, m: Message):
        """Show all shorthands for reactions."""
        shorthands = self.get("shorthands", {})
        text = (
            "<b>–Ø—Ä–ª—ã–∫–∏ —Ä–µ–∞–∫—Ü–∏–π:</b>\n"
            + "".join(f"{name} - {emoji}\n" for name, emoji in shorthands.items())
            + "<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —è—Ä–ª—ã–∫–∏ —Ä–µ–∞–∫—Ü–∏–π:</b>\n"
            + "".join(f"{name} - {emoji}\n" for name, emoji in edb.items())
        )
        await utils.answer(m, text)

    async def reactcmd(self, m: Message):
        """React to a message.
        /react <name>/<emoji>"""
        args = utils.get_args_raw(m)
        if not args:
            return await utils.answer(m, self.strings("name?"))
        if args in edb.keys():
            emoji = edb[args]
        else:
            shorthands = self.get("shorthands", {})
            if args in shorthands.keys():
                emoji = shorthands[args]
            else:
                return await utils.answer(m, self.strings("name?!"))
        if not m.is_reply:
            return await utils.answer(m, self.strings("reply?"))
        reply = await m.get_reply_message()
        if isinstance(emoji, str):
            await reply.react(emoji)
        else:
            await reply.react(tt.tl.types.ReactionCustomEmoji(emoji))
        await utils.answer(m, self.strings("done"))
        await asyncio.sleep(1)
        await m.delete()
