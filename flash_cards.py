# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: flash_cards
# Author: hikariatama
# Commands:
# .newdeck  | .decks    | .deletedeck | .listdeck | .editdeck
# .savedeck | .htmldeck
# ---------------------------------------------------------------------------------

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# scope: hikka_min 1.2.10

# meta pic: https://img.icons8.com/stickers/500/000000/cards.png
# meta banner: https://mods.hikariatama.ru/badges/flash_cards.jpg
# meta developer: @hikarimods

import asyncio
import io
import json
import re
from random import randint

from telethon.tl.types import Message

from .. import loader, utils

TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Testing ^title_deck_name^</title>
    <style type="text/css">
        @import url('https://fonts.googleapis.com/css2?family=Exo+2&display=swap');
        * {
            box-sizing: border-box;
            transition: all .3s ease;
        }
        body {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            background: #121212;
            color: #fff;
            font-family: 'Exo 2';
        }

        .cards, .testing {
            width: 94%;
            margin-left: 3%;
            min-height: 30vh;
            background: #121212;
            border-radius: 10px;
            box-shadow: inset 9.31px 9.31px 19px #0B0B0B, inset -9.31px -9.31px 19px #161616;
            padding: 15px 20px;
        }

        .button {
            width: 94%;
            padding: 20px 0;
            text-align: center;
            font-size: 22px;
            margin-left: 3%;
            background: #121212;
            border-radius: 10px;
            margin-top: 10px;
            user-select: none;
            cursor: pointer;
            box-shadow: inset 9.31px 9.31px 19px #0B0B0B, inset -9.31px -9.31px 19px #161616;
        }

        .back {
            width: 94%;
            border: none;
            outline: none;
            padding: 10px 0;
            text-align: center;
            font-size: 20px;
            margin-left: 3%;
            border-radius: 5px;
            margin-top: 10px;

            background: linear-gradient(145deg , #d9d9d9, #C8C8C8);
            box-shadow: rgb(117 117 117) 0px 1px 20px 0px inset;
        }

        .back::placeholder {
            color: #555;
        }

        h1 {
            margin: 20px;
            text-align: center;
            font-size: 25px;
            padding: 0;
            margin-left: 5%;
        }

        @media screen and (max-width: 736px) {
            body {
                padding: 10px;
            }

            h1 {
                font-size: 25px;
                text-align: center;
                margin-top: 10px;
                margin-bottom: 20px;
            }
        }

        .testing {
            display: none;
        }

        .front {
            margin-left: 0;
            margin-right: 0;
        }
    </style>
</head>
<body>
    <h1>^deck_name^</h1>
    <div class="cards">
        Loading...
    </div>
    <div class="testing">
        <h1 class="front"></h1>
        <input class="back" type="text" placeholder="–û—Ç–≤–µ—Ç">
    </div>
    <div class="begin button">Start test</div>

    <script type="text/javascript">
        cards = JSON.parse("^json_cards^");
        var cards_html = "";
        for (var front in cards) {
            cards_html += front + " - " + cards[front] + "<br>\\n";
        }

        document.querySelector('.cards').innerHTML = cards_html;

        function getRndInteger(min, max) {return Math.floor(Math.random() * (max - min) ) + min;}

        function render_next_one() {
            var keys = Object.keys(cards);
            var front = keys[getRndInteger(0,keys.length)];
            var back = cards[front];
            document.querySelector('.front').innerHTML = front;
            document.querySelector('.back').setAttribute('answer', back);
        }

        function check_answer() {
            var el = document.querySelector('.back');
            if(el.getAttribute('answer') == el.value){
                document.querySelector('.front').innerHTML = "Yup!";
                document.querySelector('.testing').style.background = '#26681e';
            } else {
                document.querySelector('.testing').style.background = '#611a1a';
                document.querySelector('.front').innerHTML = "Nope. Right answer: " + el.getAttribute('answer');
            }

            setTimeout(() => {
                document.querySelector('.testing').style.background = '#121212';
                render_next_one();
            }, 1000);
            el.value = "";
        }

        document.querySelector('.begin').onclick = function() {
            document.querySelector('.cards').style.opacity = 0;
            setTimeout(() => {document.querySelector('.cards').style.display = 'none'; document.querySelector('.testing').style.display = 'block';}, 300);
            this.classList.remove('begin');
            this.classList.add('next');
            this.innerHTML = "Check answer";
            render_next_one();
            document.querySelector('.next').onclick = function() {
                check_answer();
            }
        }

        document.querySelector('.back').onkeyup = function(e) {
            if (e.key === 'Enter' || e.keyCode === 13) {
                check_answer();
            }
        }
    </script>
</body>
</html>
        """


@loader.tds
class FlashCardsMod(loader.Module):
    """Flash cards for learning"""

    strings = {
        "name": "FlashCards",
        "deck_not_found": "<b>üö´ Deck not found</b",
        "no_deck_name": "<b>You haven't provided deck name</b>",
        "deck_created": "#Deck <code>#{}</code> <b>{}</b> successfully created!",
        "deck_removed": "<b>üö´ Deck removed</b>",
        "save_deck_no_reply": (
            "<b>üö´ This command should be used in reply to message with deck items.</b>"
        ),
        "deck_saved": "‚úÖ <b>Deck saved!</b>",
        "generating_page": "<b>‚öôÔ∏è Generating page, please wait ...</b>",
        "offline_testing": "<b>üìñ Offline testing, based on deck {}</b>",
    }

    strings_ru = {
        "deck_not_found": "<b>üö´ –î–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b",
        "no_deck_name": "<b>–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –∏–º—è –¥–µ–∫–∏</b>",
        "deck_created": "#Deck <code>#{}</code> <b>{}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
        "deck_removed": "<b>üö´ –î–µ–∫–∞ —É–¥–∞–ª–µ–Ω–∞</b>",
        "save_deck_no_reply": (
            "<b>üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –¥–µ–∫—É.</b>"
        ),
        "deck_saved": "‚úÖ <b>–î–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>",
        "generating_page": "<b>‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å–µ–∫—É–Ω–¥—É...</b>",
        "offline_testing": "<b>üìñ –û—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–∫–∏ {}</b>",
        "_cmd_doc_newdeck": "<name> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–µ–∫—É",
        "_cmd_doc_decks": "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–∫–∏",
        "_cmd_doc_deletedeck": "<id> - –£–¥–∞–ª–∏—Ç—å –¥–µ–∫—É",
        "_cmd_doc_listdeck": "<id> - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–∫—É",
        "_cmd_doc_editdeck": "<id> - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–∫—É",
        "_cmd_doc_savedeck": "<reply> - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–∫—É",
        "_cmd_doc_htmldeck": "<id> - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –¥–µ–∫–µ",
        "_cls_doc": "–§–ª–µ—à-–∫–∞—Ä—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
    }

    strings_de = {
        "deck_not_found": "<b>üö´ Deck nicht gefunden</b",
        "no_deck_name": "<b>Du hast keinen Decknamen angegeben</b>",
        "deck_created": "#Deck <code>#{}</code> <b>{}</b> erfolgreich erstellt!",
        "deck_removed": "<b>üö´ Deck entfernt</b>",
        "save_deck_no_reply": (
            "<b>üö´ Dieser Befehl sollte in Antwort auf eine Nachricht mit"
            " Deck-Elementen"
            " verwendet werden.</b>"
        ),
        "deck_saved": "‚úÖ <b>Deck gespeichert!</b>",
        "generating_page": "<b>‚öôÔ∏è Seite wird generiert, bitte warten ...</b>",
        "offline_testing": "<b>üìñ Offline-Testing basierend auf dem Deck {}</b>",
        "_cmd_doc_newdeck": "<name> - Erstelle ein neues Deck",
        "_cmd_doc_decks": "Zeige Decks",
        "_cmd_doc_deletedeck": "<id> - Deck l√∂schen",
        "_cmd_doc_listdeck": "<id> - Deck anzeigen",
        "_cmd_doc_editdeck": "<id> - Deck bearbeiten",
        "_cmd_doc_savedeck": "<reply> - Deck speichern",
        "_cmd_doc_htmldeck": "<id> - Offline-Testing basierend auf dem Deck",
        "_cls_doc": "Flash-Karten f√ºr das Lernen",
    }

    strings_tr = {
        "deck_not_found": "<b>üö´ Deck bulunamadƒ±</b",
        "no_deck_name": "<b>Deck adƒ± belirtmedin</b>",
        "deck_created": "#Deck <code>#{}</code> <b>{}</b> ba≈üarƒ±yla olu≈üturuldu!",
        "deck_removed": "<b>üö´ Deck kaldƒ±rƒ±ldƒ±</b>",
        "save_deck_no_reply": "<b>üö´ Bu komut, deck √∂ƒüeleriyle yanƒ±tlanmalƒ±dƒ±r.</b>",
        "deck_saved": "‚úÖ <b>Deck kaydedildi!</b>",
        "generating_page": "<b>‚öôÔ∏è Sayfa olu≈üturuluyor, l√ºtfen bekleyin ...</b>",
        "offline_testing": "<b>üìñ {} deckine dayalƒ± √ßevrimdƒ±≈üƒ± test</b>",
        "_cmd_doc_newdeck": "<isim> - Yeni bir deck olu≈ütur",
        "_cmd_doc_decks": "Deckleri g√∂ster",
        "_cmd_doc_deletedeck": "<id> - Deck sil",
        "_cmd_doc_listdeck": "<id> - Decki g√∂ster",
        "_cmd_doc_editdeck": "<id> - Decki d√ºzenle",
        "_cmd_doc_savedeck": "<reply> - Decki kaydet",
        "_cmd_doc_htmldeck": "<id> - Decke dayalƒ± √ßevrimdƒ±≈üƒ± test olu≈ütur",
        "_cls_doc": "√ñƒürenmek i√ßin fla≈ü kartlar",
    }

    strings_hi = {
        "deck_not_found": "<b>üö´ ‡§°‡•á‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ</b",
        "no_deck_name": "<b>‡§Ü‡§™‡§®‡•á ‡§°‡•á‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡§ø‡§Ø‡§æ</b>",
        "deck_created": "#Deck <code>#{}</code> <b>{}</b> ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ!",
        "deck_removed": "<b>üö´ ‡§°‡•á‡§ï ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ</b>",
        "save_deck_no_reply": (
            "<b>üö´ ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§°‡•á‡§ï ‡§Ü‡§á‡§ü‡§Æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§</b>"
        ),
        "deck_saved": "‚úÖ <b>‡§°‡•á‡§ï ‡§∏‡§π‡•á‡§ú ‡§≤‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!</b>",
        "generating_page": (
            "<b>‚öôÔ∏è ‡§™‡•á‡§ú ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç ...</b>"
        ),
        "offline_testing": "<b>üìñ {} ‡§°‡•á‡§ï ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ë‡§´‡§º‡§≤‡§æ‡§á‡§® ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£</b>",
        "_cmd_doc_newdeck": "<‡§®‡§æ‡§Æ> - ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§°‡•á‡§ï ‡§¨‡§®‡§æ‡§è‡§Ç",
        "_cmd_doc_decks": "‡§°‡•á‡§ï ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç",
        "_cmd_doc_deletedeck": "<‡§Ü‡§à‡§°‡•Ä> - ‡§°‡•á‡§ï ‡§π‡§ü‡§æ‡§è‡§Ç",
        "_cmd_doc_listdeck": "<‡§Ü‡§à‡§°‡•Ä> - ‡§°‡•á‡§ï ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç",
        "_cmd_doc_editdeck": "<‡§Ü‡§à‡§°‡•Ä> - ‡§°‡•á‡§ï ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
        "_cmd_doc_savedeck": "<‡§â‡§§‡•ç‡§§‡§∞> - ‡§°‡•á‡§ï ‡§∏‡§π‡•á‡§ú‡•á‡§Ç",
        "_cmd_doc_htmldeck": "<‡§Ü‡§à‡§°‡•Ä> - ‡§°‡•á‡§ï ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ë‡§´‡§º‡§≤‡§æ‡§á‡§® ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§¨‡§®‡§æ‡§è‡§Ç",
        "_cls_doc": "‡§´‡•ç‡§≤‡•à‡§∂ ‡§ï‡§æ‡§∞‡•ç‡§° ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è",
    }

    strings_uz = {
        "deck_not_found": "<b>üö´ Deck topilmadi</b",
        "no_deck_name": "<b>Deck nomini kiritmadingiz</b>",
        "deck_created": "#Deck <code>#{}</code> <b>{}</b> muvaffaqiyatli yaratildi!",
        "deck_removed": "<b>üö´ Deck o'chirildi</b>",
        "save_deck_no_reply": (
            "<b>üö´ Bu buyruq deck elementlari bilan javob berilishi kerak.</b>"
        ),
        "deck_saved": "‚úÖ <b>Deck saqlandi!</b>",
        "generating_page": "<b>‚öôÔ∏è Sahifa yaratilmoqda, iltimos kuting ...</b>",
        "offline_testing": "<b>üìñ {} deckiga asoslangan oflayn test</b>",
        "_cmd_doc_newdeck": "<nom> - Yangi deck yaratish",
        "_cmd_doc_decks": "Decklarni ko'rsatish",
        "_cmd_doc_deletedeck": "<id> - Deckni o'chirish",
        "_cmd_doc_listdeck": "<id> - Deckni ko'rsatish",
        "_cmd_doc_editdeck": "<id> - Deckni tahrirlash",
        "_cmd_doc_savedeck": "<javob> - Deckni saqlash",
        "_cmd_doc_htmldeck": "<id> - Deckiga asoslangan oflayn test yaratish",
        "_cls_doc": "O'rganish uchun flash kartalar",
    }

    async def client_ready(self):
        self.decks = self.get("decks", {})

    def get_deck_from_reply(self, reply, limit=None):
        if reply is None:
            return False

        if "#Deck" in reply.text:
            counter = 1

            for line in reply.text.split("\n"):
                line = line.split()
                if len(line) > 1:
                    deck = (
                        line[1]
                        .replace("<code>", "")
                        .replace("</code>", "")
                        .replace("#", "")
                    )
                    try:
                        int(deck)
                    except Exception:
                        pass

                    if deck in self.decks:
                        if (
                            limit is None
                            or not limit
                            and "#Decks" not in reply.text
                            or counter == limit
                        ):
                            return deck
                        else:
                            counter += 1

        return False

    async def get_from_message(self, message: Message):
        args = utils.get_args_raw(message)
        try:
            args = args.split()[0]
        except Exception:
            pass

        if args.startswith("#"):
            args = args[1:]

        try:
            int_args = int(args)
        except Exception:
            args = False
            int_args = False

        if int(int_args) < 1000:
            args = self.get_deck_from_reply(await message.get_reply_message(), int_args)

        if not args or args not in self.decks:
            await utils.answer(message, self.strings("deck_not_found"))
            await asyncio.sleep(2)
            await message.delete()
            return False

        return args

    async def newdeckcmd(self, message: Message):
        """<name> - New deck of cards"""

        args = utils.get_args_raw(message)
        if args == "":
            await utils.answer(message, self.strings("no_deck_name"))
            await asyncio.sleep(2)
            await message.delete()
            return

        random_id = str(randint(10000, 99999))

        self.decks[random_id] = {"name": args, "cards": [("sample", "sample")]}

        self.set("decks", self.decks)
        await utils.answer(
            message,
            self.strings("deck_created").format(random_id, args),
        )

    async def deckscmd(self, message: Message):
        """List decks"""
        res = "<b>#Decks:</b>\n\n"
        for counter, (item_id, item) in enumerate(self.decks.items(), start=1):
            if len(item["cards"]) == 0:
                items = "No cards"
            else:
                items = "".join(
                    f"\n   {front} - {back}" for front, back in item["cards"][:2]
                )
                if len(item["cards"]) > 2:
                    items += "\n   <...>"
            res += (
                f"üî∏<b>{counter}.</b> <code>{item_id}</code> |"
                f" {item['name']}<code>{items}</code>\n\n"
            )
        await utils.answer(message, res)

    async def deletedeckcmd(self, message: Message):
        """<id> - Delete deck"""
        deck_id = await self.get_from_message(message)
        if not deck_id:
            return

        del self.decks[deck_id]
        self.set("decks", self.decks)
        reply = await message.get_reply_message()
        if reply:
            if "#Decks" in reply.text:
                await self.deckscmd(reply)
            elif "#Deck" in reply.text:
                await reply.edit(reply.text + "\n" + self.strings("deck_removed"))
        await utils.answer(message, self.strings("deck_removed"))

    async def listdeckcmd(self, message: Message):
        """<id> - List deck items"""
        deck_id = await self.get_from_message(message)
        if not deck_id:
            return

        deck = self.decks[deck_id]
        res = f"üìã#Deck #{deck_id} <b>{deck['name']}</b>:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        for i, (front, back) in enumerate(deck["cards"], start=1):
            res += f"\n<b>{i}. {front} - {back}</b>"
        await utils.answer(message, res)

    async def editdeckcmd(self, message: Message):
        """<id> - Edit deck items"""
        deck_id = await self.get_from_message(message)
        if not deck_id:
            return

        deck = self.decks[deck_id]
        res = f"üìã#Deck #{deck_id} \"<b>{deck['name']}</b>\":\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        for front, back in deck["cards"]:
            res += f"\n<b>{front} - {back}</b>"

        res += (
            "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nEdit and type <code>.savedeck</code> in reply to"
            " this"
            " message\n<i>Note: you can edit title and cards, but other message should"
            " stay untouched, otherwise it can be saved incorrectly!</i> #Editing"
        )

        await utils.answer(message, res)

    def remove_html(self, text):
        return re.sub(r"<.*?>", "", text)

    async def savedeckcmd(self, message: Message):
        """<reply> - Save deck. Do not use if you don't know what is this"""
        reply = await message.get_reply_message()
        if not reply or "#Editing" not in reply.text:
            await utils.answer(message, self.strings("save_deck_no_reply"))
            await asyncio.sleep(2)
            await message.delete()
            return False

        deck_id = await self.get_from_message(message)
        if not deck_id:
            return

        deck = self.decks[deck_id]
        self.decks[deck_id]["cards"] = []
        items = reply.text.split("\n")
        for item in items[2:-3]:
            self.decks[deck_id]["cards"].append(
                (
                    self.remove_html(item.split(" - ")[0]),
                    self.remove_html(item.split(" - ")[1]),
                )
            )

        try:
            self.decks[deck_id]["name"] = self.remove_html(
                re.search(r"&quot;(.+?)&quot;", items[0]).group(1)
            )
        except Exception:
            pass

        self.set("decks", self.decks)

        res = f"üìã#Deck #{deck_id} <b>{deck['name']}</b>:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        for i, (front, back) in enumerate(deck["cards"], start=1):
            res += f"\n<b>{i}. {front} - {back}</b>"
        res += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" + self.strings("deck_saved")

        await utils.answer(reply, res)
        await message.delete()

    async def htmldeckcmd(self, message: Message):
        """<id> - Generates the page with specified deck"""
        deck_id = await self.get_from_message(message)
        if not deck_id:
            return

        deck = self.decks[deck_id]
        await utils.answer(message, self.strings("generating_page"))
        deck_name = deck["name"]
        loc_cards = deck["cards"].copy()
        cards = dict(loc_cards)
        json_cards = json.dumps(cards).replace('"', '\\"')
        txt = io.BytesIO(
            TEMPLATE.replace("^title_deck_name^", deck_name)
            .replace("^deck_name^", deck_name)
            .replace("^json_cards^", json_cards)
            .encode("utf-8")
        )
        txt.name = "testing.html"
        await message.delete()
        await message.client.send_file(
            message.to_id,
            txt,
            caption=self.strings("offline_testing").format(deck_name),
        )
