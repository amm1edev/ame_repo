# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: donations
# Author: hikariatama
# Commands:
# .donate
# ---------------------------------------------------------------------------------

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://static.dan.tatar/donations_icon.png
# meta banner: https://mods.hikariatama.ru/badges/donations.jpg
# meta desc: [RU] Create donate widgets through Hikari.Donations platform
# meta developer: @hikarimods
# scope: hikka_only
# scope: hikka_min 1.2.10

import logging

from telethon.tl.types import Message

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class HikariDonationsMod(loader.Module):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –¥–æ–Ω–∞—Ç–∞"""

    strings = {"name": "HikariDonations", "args": "üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã</b>"}

    async def donatecmd(self, message: Message):
        """<—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–Ω–∞—Ç–Ω—ã–π –≤–∏–¥–∂–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        args = utils.get_args_raw(message)
        if not args or len(args.split()) < 2 or not args.split()[0].isdigit():
            await utils.answer(message, self.strings("args"))
            return

        amount = int(args.split()[0])
        target = args.split(maxsplit=1)[1]

        if amount not in range(1, 50001):
            await utils.answer(message, self.strings("args"))
            return

        amount = str(amount)

        async with self._client.conversation("@hikaridonate_bot") as conv:
            for msg in ["/widget", target, amount]:
                m = await conv.send_message(msg)
                r = await conv.get_response()

                await m.delete()
                await r.delete()

        widget_id = r.reply_markup.rows[0].buttons[0].query
        q = await self._client.inline_query("@hikaridonate_bot", widget_id)
        await q[0].click(message.peer_id)
        await message.delete()
