# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: silent_tags
# Author: hikariatama
# Commands:
# .stags
# ---------------------------------------------------------------------------------

__version__ = (2, 0, 3)

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://static.dan.tatar/silent_tags_icon.png
# meta banner: https://mods.hikariatama.ru/badges/silent_tags.jpg
# meta developer: @hikarimods
# scope: inline
# scope: hikka_only
# scope: hikka_min 1.5.2

import asyncio
import time

from telethon.tl.functions.contacts import GetBlockedRequest
from telethon.tl.types import Channel, Message

from .. import loader, utils


@loader.tds
class SilentTagsMod(loader.Module):
    """Mutes tags and logs them"""

    strings = {
        "name": "SilentTags",
        "tagged": (
            '<b>ü§´ You were tagged in <a href="{}">{}</a> by <a'
            ' href="tg://openmessage?user_id={}">{}</a></b>\n<code>Message:</code>\n<code>{}</code>\n<b>Link:'
            ' <a href="https://t.me/c/{}/{}">click</a></b>'
        ),
        "tag_mentioned": "<b>ü§´ Silent Tags are active</b>",
        "stags_status": "<b>ü§´ Silent Tags are {}</b>",
        "_cfg_doc_silent_users": (
            "Do not send notifications about tags from users with ids listed"
        ),
        "_cfg_doc_silent_chats": (
            "Do not send notifications about tags from chats with ids listed"
        ),
        "_cfg_doc_silent_bots": "Do not send notifications about tags from bots",
        "_cfg_doc_silent_blocked": (
            "Do not send notifications about tags from blocked users"
        ),
        "_cfg_doc_ignore_users": "Disable SilentTags for users with ids listed",
        "_cfg_doc_ignore_chats": "Disable SilentTags for chats with ids listed",
        "_cfg_doc_ignore_bots": "Disable SilentTags for bots",
        "_cfg_doc_ignore_blocked": "Disable SilentTags for blocked users",
        "_cfg_doc_silent": "Do not send notifications about Silent Tags being active",
        "_cfg_doc_use_whitelist": "Convert all Series-like options to whitelist",
    }

    strings_ru = {
        "tag_mentioned": "<b>ü§´ Silent Tags –≤–∫–ª—é—á–µ–Ω—ã</b>",
        "stags_status": "<b>ü§´ Silent Tags {}</b>",
        "_cmd_doc_stags": "<on\\off> - –í–∫–ª—é—á–∏—Ç—å\\–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–≥–∞—Ö",
        "_cls_doc": "–û—Ç–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–≥–∞—Ö",
        "_cfg_doc_ignore_users": (
            "–û—Ç–∫–ª—é—á–∏—Ç—å SilentTags –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ ID"
        ),
        "_cfg_doc_ignore_chats": "–û—Ç–∫–ª—é—á–∏—Ç—å SilentTags –≤ —á–∞—Ç–∞—Ö —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ ID",
        "_cfg_doc_ignore_bots": "–û—Ç–∫–ª—é—á–∏—Ç—å SilentTags –¥–ª—è –±–æ—Ç–æ–≤",
        "_cfg_doc_ignore_blocked": (
            "–û—Ç–∫–ª—é—á–∏—Ç—å SilentTags –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        ),
        "_cfg_doc_silent_users": (
            "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–µ–≥–∞—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ ID"
        ),
        "_cfg_doc_silent_chats": (
            "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–µ–≥–∞—Ö –≤ —á–∞—Ç–∞—Ö —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ ID"
        ),
        "_cfg_doc_silent_bots": "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–µ–≥–∞—Ö –æ—Ç –±–æ—Ç–æ–≤",
        "_cfg_doc_silent_blocked": (
            "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–µ–≥–∞—Ö –æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        ),
        "_cfg_doc_silent": "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã Silent Tags",
        "_cfg_doc_use_whitelist": (
            "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"
        ),
    }

    strings_de = {
        "tag_mentioned": "<b>ü§´ Stille Tags sind aktiviert</b>",
        "stags_status": "<b>ü§´ Stille Tags sind {}</b>",
        "_cmd_doc_stags": "<on\\off> - Stille Tags aktivieren\\deaktivieren",
        "_cls_doc": "Deaktiviert Stille Tags",
        "_cfg_doc_ignore_users": (
            "Deaktiviert Stille Tags f√ºr Nutzer mit den folgenden IDs"
        ),
        "_cfg_doc_ignore_chats": (
            "Deaktiviert Stille Tags in Chats mit den folgenden IDs"
        ),
        "_cfg_doc_ignore_bots": "Deaktiviert Stille Tags f√ºr Bots",
        "_cfg_doc_ignore_blocked": "Deaktiviert Stille Tags f√ºr blockierte Nutzer",
        "_cfg_doc_silent_users": (
            "Sendet keine Nachrichten √ºber Stille Tags von Nutzern mit den"
            " folgenden IDs"
        ),
        "_cfg_doc_silent_chats": (
            "Sendet keine Nachrichten √ºber Stille Tags in Chats mit den folgenden IDs"
        ),
        "_cfg_doc_silent_bots": "Sendet keine Nachrichten √ºber Stille Tags von Bots",
        "_cfg_doc_silent_blocked": (
            "Sendet keine Nachrichten √ºber Stille Tags von blockierten Nutzern"
        ),
        "_cfg_doc_silent": (
            "Sendet keine Nachricht √ºber den aktivierten Status von Stille Tags"
        ),
        "_cfg_doc_use_whitelist": (
            "Konvertiert alle Serien√§hnlichen Optionen in eine Whitelist"
        ),
    }

    strings_hi = {
        "tag_mentioned": "<b>ü§´ ‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•à‡§Ç</b>",
        "stags_status": "<b>ü§´ ‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó {}</b>",
        "_cmd_doc_stags": "<on\\off> - ‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§ï‡•ã ‡§ö‡§æ‡§≤‡•Ç\\‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
        "_cls_doc": "‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡§§‡§æ ‡§π‡•à",
        "_cfg_doc_ignore_users": "‡§®‡§ø‡§Æ‡•ç‡§® ‡§Ü‡§à‡§°‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§Ç",
        "_cfg_doc_ignore_chats": "‡§®‡§ø‡§Æ‡•ç‡§® ‡§Ü‡§à‡§°‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§Ç",
        "_cfg_doc_ignore_bots": "‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§Ç ‡§¨‡•â‡§ü‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è",
        "_cfg_doc_ignore_blocked": (
            "‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§Ç ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡§ø‡§è ‡§ó‡§è ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è"
        ),
        "_cfg_doc_silent_users": (
            "‡§®‡§ø‡§Æ‡•ç‡§® ‡§Ü‡§à‡§°‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç"
        ),
        "_cfg_doc_silent_chats": (
            "‡§®‡§ø‡§Æ‡•ç‡§® ‡§Ü‡§à‡§°‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç"
        ),
        "_cfg_doc_silent_bots": "‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç ‡§¨‡•â‡§ü‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è",
        "_cfg_doc_silent_blocked": (
            "‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡§ø‡§è ‡§ó‡§è ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è"
        ),
        "_cfg_doc_silent": "‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§ü‡•à‡§ó ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•ã ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç",
        "_cfg_doc_use_whitelist": "‡§∏‡§≠‡•Ä ‡§∏‡•Ä‡§∞‡•Ä‡§ú‡§º ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•ã‡§Ç ‡§ï‡•ã ‡§µ‡•ç‡§π‡§æ‡§á‡§ü‡§≤‡§ø‡§∏‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§ï‡§®‡§µ‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç",
    }

    strings_tr = {
        "tag_mentioned": "<b>ü§´ Sessiz etiketler etkin</b>",
        "stags_status": "<b>ü§´ Sessiz etiketler {}</b>",
        "_cmd_doc_stags": (
            "<on\\off> - Sessiz etiketleri etkinle≈ütirin\\devre dƒ±≈üƒ± bƒ±rakƒ±n"
        ),
        "_cls_doc": "Sessiz etiketleri devre dƒ±≈üƒ± bƒ±rakƒ±r",
        "_cfg_doc_ignore_users": (
            "Sessiz etiketleri a≈üaƒüƒ±daki kimliklerle devre dƒ±≈üƒ± bƒ±rakƒ±n"
        ),
        "_cfg_doc_ignore_chats": (
            "Sessiz etiketleri a≈üaƒüƒ±daki kimliklerle devre dƒ±≈üƒ± bƒ±rakƒ±n"
        ),
        "_cfg_doc_ignore_bots": "Sessiz etiketleri devre dƒ±≈üƒ± bƒ±rakƒ±n",
        "_cfg_doc_ignore_blocked": (
            "Sessiz etiketleri engellenen kullanƒ±cƒ±lar i√ßin devre dƒ±≈üƒ± bƒ±rakƒ±n"
        ),
        "_cfg_doc_silent_users": (
            "A≈üaƒüƒ±daki kimliklerle sessiz etiketlerle ileti g√∂nderme"
        ),
        "_cfg_doc_silent_chats": (
            "A≈üaƒüƒ±daki kimliklerle sessiz etiketlerle ileti g√∂nderme"
        ),
        "_cfg_doc_silent_bots": "Sessiz etiketlerle ileti g√∂nderme",
        "_cfg_doc_silent_blocked": (
            "Sessiz etiketlerle ileti g√∂nderme engellenen kullanƒ±cƒ±lar i√ßin"
        ),
        "_cfg_doc_silent": "Sessiz etiketlerin etkinle≈ütirilmesi ile ileti g√∂nderme",
        "_cfg_doc_use_whitelist": (
            "T√ºm serisi benzer se√ßenekleri beyaz listeye d√∂n√º≈üt√ºr√ºn"
        ),
    }

    strings_uz = {
        "tag_mentioned": "<b>ü§´ Sessiz etiketlar yoqilgan</b>",
        "stags_status": "<b>ü§´ Sessiz etiketlar {}</b>",
        "_cmd_doc_stags": "<on\\off> - Sessiz etiketlarni yoqish\\o'chirish",
        "_cls_doc": "Sessiz etiketlarni o'chiradi",
        "_cfg_doc_ignore_users": (
            "Sessiz etiketlarni quyidagi identifikatorlar bilan o'chirish"
        ),
        "_cfg_doc_ignore_chats": (
            "Sessiz etiketlarni quyidagi identifikatorlar bilan o'chirish"
        ),
        "_cfg_doc_ignore_bots": "Sessiz etiketlarni o'chirish",
        "_cfg_doc_ignore_blocked": (
            "Sessiz etiketlarni bloklangan foydalanuvchilar uchun o'chirish"
        ),
        "_cfg_doc_silent_users": (
            "Quyidagi identifikatorlar bilan sessiz etiketlar bilan xabar yuborish"
        ),
        "_cfg_doc_silent_chats": (
            "Quyidagi identifikatorlar bilan sessiz etiketlar bilan xabar yuborish"
        ),
        "_cfg_doc_silent_bots": "Sessiz etiketlar bilan xabar yuborish",
        "_cfg_doc_silent_blocked": (
            "Sessiz etiketlar bilan xabar yuborish bloklangan foydalanuvchilar uchun"
        ),
        "_cfg_doc_silent": "Sessiz etiketlar yoqilgan bo'lishi xabar yuborish",
        "_cfg_doc_use_whitelist": (
            "Barcha seriyalar bir-biriga o'xshash variantlarni o'q ro'yxatiga"
            " o'zgartirish"
        ),
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "silent",
                False,
                lambda: self.strings("_cfg_doc_silent"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "ignore_bots",
                False,
                lambda: self.strings("_cfg_doc_ignore_bots"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "ignore_blocked",
                False,
                lambda: self.strings("_cfg_doc_ignore_blocked"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "ignore_users",
                doc=lambda: self.strings("_cfg_doc_ignore_users"),
                validator=loader.validators.Series(
                    validator=loader.validators.TelegramID()
                ),
            ),
            loader.ConfigValue(
                "ignore_chats",
                doc=lambda: self.strings("_cfg_doc_ignore_chats"),
                validator=loader.validators.Series(
                    validator=loader.validators.TelegramID()
                ),
            ),
            loader.ConfigValue(
                "silent_bots",
                False,
                lambda: self.strings("_cfg_doc_silent_bots"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "silent_blocked",
                False,
                lambda: self.strings("_cfg_doc_silent_blocked"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "silent_users",
                doc=lambda: self.strings("_cfg_doc_silent_users"),
                validator=loader.validators.Series(
                    validator=loader.validators.TelegramID()
                ),
            ),
            loader.ConfigValue(
                "silent_chats",
                doc=lambda: self.strings("_cfg_doc_silent_chats"),
                validator=loader.validators.Series(
                    validator=loader.validators.TelegramID()
                ),
            ),
            loader.ConfigValue(
                "use_whitelist",
                False,
                lambda: self.strings("_cfg_doc_use_whitelist"),
                validator=loader.validators.Boolean(),
            ),
        )

    @loader.loop(interval=300)
    async def get_blocked(self):
        self._blocked = [
            user.id
            for user in (
                await self._client(GetBlockedRequest(offset=0, limit=1000))
            ).users
        ]

    async def client_ready(self):
        self._ratelimit = []
        self._fw_protect = {}
        self._blocked = []
        self._fw_protect_limit = 5

        self.c, _ = await utils.asset_channel(
            self._client,
            "silent-tags",
            "üîá Chat for silent tags",
            silent=True,
            invite_bot=True,
            _folder="hikka",
        )

        if self.config["ignore_blocked"] or self.config["silent_blocked"]:
            self.get_blocked.start()

        self.chat_aio = f"-100{self.c.id}"

    async def stagscmd(self, message: Message):
        """<on\\off> - Toggle notifications about tags"""
        args = utils.get_args_raw(message)

        if args not in ["on", "off"]:
            await utils.answer(
                message,
                self.strings("stags_status").format(
                    "active" if self.get("stags", False) else "inactive"
                ),
            )
            return

        args = args == "on"
        self.set("stags", args)
        self._ratelimit = []
        await utils.answer(
            message,
            self.strings("stags_status").format("now on" if args else "now off"),
        )

    async def watcher(self, message: Message):
        if (
            not getattr(message, "mentioned", False)
            or not self.get("stags", False)
            or utils.get_chat_id(message) == self.c.id
            or (
                self.config["whitelist"]
                and message.sender_id not in (self.config["ignore_users"] or [])
                or not self.config["whitelist"]
                and message.sender_id in (self.config["ignore_users"] or [])
            )
            or self.config["ignore_blocked"]
            and message.sender.id in self._blocked
            or (
                self.config["whitelist"]
                and utils.get_chat_id(message)
                not in (self.config["ignore_chats"] or [])
                or not self.config["whitelist"]
                and utils.get_chat_id(message) in (self.config["ignore_chats"] or [])
            )
            or self.config["ignore_bots"]
            and message.sender.bot
        ):
            return

        await self._client.send_read_acknowledge(
            message.chat_id,
            clear_mentions=True,
        )

        cid = utils.get_chat_id(message)

        if (
            cid in self._fw_protect
            and len(list(filter(lambda x: x > time.time(), self._fw_protect[cid])))
            > self._fw_protect_limit
        ):
            return

        if message.is_private:
            ctitle = "pm"
        else:
            chat = await self._client.get_entity(message.peer_id)
            grouplink = (
                f"https://t.me/{chat.username}"
                if getattr(chat, "username", None) is not None
                else ""
            )
            ctitle = chat.title

        if cid not in self._fw_protect:
            self._fw_protect[cid] = []

        uid = message.sender_id

        try:
            user = await self._client.get_entity(message.sender_id)
            uname = user.first_name
        except Exception:
            uname = "Unknown user"
            user = None

        if (
            (
                self.config["whitelist"]
                and message.sender_id not in (self.config["silent_users"] or [])
                or not self.config["whitelist"]
                and message.sender_id in (self.config["silent_users"] or [])
            )
            or self.config["silent_blocked"]
            and message.sender.id in self._blocked
            or (
                self.config["whitelist"]
                and utils.get_chat_id(message)
                not in (self.config["silent_chats"] or [])
                or not self.config["whitelist"]
                and utils.get_chat_id(message) in (self.config["silent_chats"] or [])
            )
            or not (isinstance(user, Channel))
            and self.config["silent_bots"]
            and message.sender.bot
        ):
            return

        await self.inline.bot.send_message(
            self.chat_aio,
            self.strings("tagged").format(
                grouplink,
                utils.escape_html(ctitle),
                uid,
                utils.escape_html(uname),
                utils.escape_html(message.raw_text),
                cid,
                message.id,
            ),
            disable_web_page_preview=True,
            parse_mode="HTML",
        )

        self._fw_protect[cid] += [time.time() + 5 * 60]

        if cid not in self._ratelimit and not self.config["silent"]:
            self._ratelimit += [cid]
            ms = await utils.answer(message, self.strings("tag_mentioned"))
            await asyncio.sleep(3)
            await ms.delete()
