# ---------------------------------------------------------------------------------
#  /\_/\  ЁЯМР This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  ЁЯФР Licensed under the GNU AGPLv3.
#  > ^ <   тЪая╕П Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: account_switcher
# Author: hikariatama
# Commands:
# .accsave
# ---------------------------------------------------------------------------------

__version__ = (2, 0, 1)

#             тЦИ тЦИ тЦА тЦИтЦДтЦА тЦДтЦАтЦИ тЦИтЦАтЦИ тЦА
#             тЦИтЦАтЦИ тЦИ тЦИ тЦИ тЦИтЦАтЦИ тЦИтЦАтЦД тЦИ
#              ┬й Copyright 2022
#           https://t.me/hikariatama
#
# ЁЯФТ      Licensed under the GNU AGPLv3
# ЁЯМР https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://static.dan.tatar/account_switcher_icon.png
# meta banner: https://mods.hikariatama.ru/badges/account_switcher.jpg
# meta developer: @hikarimods
# scope: hikka_only
# scope: hikka_min 1.2.10

import io
import logging
import re
import typing

from aiogram.utils.exceptions import ChatNotFound
from telethon.tl.functions.account import UpdateProfileRequest
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.tl.functions.photos import UploadProfilePhotoRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import Message as TelethonMessage

from .. import loader, utils
from ..inline.types import InlineCall, InlineMessage

logger = logging.getLogger(__name__)


@loader.tds
class AccountSwitcherMod(loader.Module):
    """Allows you to easily switch between different profiles"""

    strings = {
        "name": "AccountSwitcher",
        "account_saved": (
            "<emoji document_id=5301255387306009369>ЁЯМЪ</emoji> <b><a"
            ' href="https://t.me/c/{}/{}">Account</a> saved!</b>'
        ),
        "restore_btn": "ЁЯСЖ Restore",
        "desc": "This chat will handle your saved profiles",
        "first_name_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> First name restored\n"
        ),
        "first_name_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> First name not saved\n"
        ),
        "last_name_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> First name restored\n"
        ),
        "last_name_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> First name not saved\n"
        ),
        "bio_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> Bio restored\n"
        ),
        "bio_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> Bio not saved\n"
        ),
        "data_not_restored": (
            "<emoji document_id=5312526098750252863>ЁЯЪл</emoji> First name not"
            " restored\n<emoji document_id=5312526098750252863>ЁЯЪл</emoji> Last name not"
            " restored\n<emoji document_id=5312526098750252863>ЁЯЪл</emoji> Bio not"
            " restored\n"
        ),
        "pfp_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> Profile photo restored"
        ),
        "pfp_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> Profile photo not saved"
        ),
    }

    strings_ru = {
        "account_saved": (
            "<emoji document_id=5301255387306009369>ЁЯМЪ</emoji> <b><a"
            ' href="https://t.me/c/{}/{}">╨Р╨║╨║╨░╤Г╨╜╤В</a> ╤Б╨╛╤Е╤А╨░╨╜╨╡╨╜!</b>'
        ),
        "restore_btn": "ЁЯСЖ ╨Т╨╛╤Б╤Б╤В╨░╨╜╨╛╨▓╨╕╤В╤М",
        "desc": "╨в╤Г╤В ╨▒╤Г╨┤╤Г╤В ╨┐╨╛╤П╨▓╨╗╤П╤В╤М╤Б╤П ╤Б╨╛╤Е╤А╨░╨╜╨╡╨╜╨╜╤Л╨╡ ╨┐╤А╨╛╤Д╨╕╨╗╨╕",
        "first_name_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> ╨Ш╨╝╤П ╨▓╨╛╤Б╤Б╤В╨░╨╜╨╛╨▓╨╗╨╡╨╜╨╛\n"
        ),
        "first_name_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> ╨Ш╨╝╤П ╨╜╨╡ ╤Б╨╛╤Е╤А╨░╨╜╤П╨╗╨╛╤Б╤М\n"
        ),
        "last_name_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> ╨д╨░╨╝╨╕╨╗╨╕╤П ╨▓╨╛╤Б╤Б╤В╨░╨╜╨╛╨▓╨╗╨╡╨╜╨░\n"
        ),
        "last_name_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> ╨д╨░╨╝╨╕╨╗╨╕╤П ╨╜╨╡ ╤Б╨╛╤Е╤А╨░╨╜╤П╨╗╨░╤Б╤М\n"
        ),
        "bio_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> ╨С╨╕╨╛ ╨▓╨╛╤Б╤Б╤В╨░╨╜╨╛╨▓╨╗╨╡╨╜╨╛\n"
        ),
        "bio_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> ╨С╨╕╨╛ ╨╜╨╡ ╤Б╨╛╤Е╤А╨░╨╜╤П╨╗╨╛╤Б╤М\n"
        ),
        "data_not_restored": (
            "<emoji document_id=5312526098750252863>ЁЯЪл</emoji> ╨Ш╨╝╤П ╨╜╨╡"
            " ╨▓╨╛╤Б╤Б╤В╨░╨╜╨╛╨▓╨╗╨╡╨╜╨╛\n<emoji document_id=5312526098750252863>ЁЯЪл</emoji> ╨д╨░╨╝╨╕╨╗╨╕╤П"
            " ╨╜╨╡ ╨▓╨╛╤Б╤Б╤В╨░╨╜╨╛╨▓╨╗╨╡╨╜╨░\n<emoji document_id=5312526098750252863>ЁЯЪл</emoji>"
            " ╨С╨╕╨╛ ╨╜╨╡"
            " ╨▓╨╛╤Б╤Б╤В╨░╨╜╨╛╨▓╨╗╨╡╨╜╨╛\n"
        ),
        "pfp_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> ╨Р╨▓╨░╤В╨░╤А╨║╨░ ╨▓╨╛╤Б╤Б╤В╨░╨╜╨╛╨▓╨╗╨╡╨╜╨░"
        ),
        "pfp_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> ╨Р╨▓╨░╤В╨░╤А╨║╨░ ╨╜╨╡ ╤Б╨╛╤Е╤А╨░╨╜╤П╨╗╨░╤Б╤М"
        ),
        "_cmd_doc_accsave": "╨б╨╛╤Е╤А╨░╨╜╨╕╤В╤М ╨░╨║╨║╨░╤Г╨╜╤В ╨┤╨╗╤П ╨┐╨╛╤Б╨╗╨╡╨┤╤Г╤О╤Й╨╡╨│╨╛ ╨╕╤Б╨┐╨╛╨╗╤М╨╖╨╛╨▓╨░╨╜╨╕╤П",
        "_cls_doc": "╨Я╨╛╨╖╨▓╨╛╨╗╤П╨╡╤В ╨▒╤Л╤Б╤В╤А╨╛ ╨┐╨╡╤А╨╡╨║╨╗╤О╤З╨░╤В╤М╤Б╤П ╨╝╨╡╨╢╨┤╤Г ╤А╨░╨╖╨╜╤Л╨╝╨╕ ╨░╨║╨║╨░╤Г╨╜╤В╨░╨╝╨╕",
    }

    strings_de = {
        "account_saved": (
            "<emoji document_id=5301255387306009369>ЁЯМЪ</emoji> <b><a"
            ' href="https://t.me/c/{}/{}">Konto</a> gespeichert!</b>'
        ),
        "restore_btn": "ЁЯСЖ Wiederherstellen",
        "desc": "Dieser Chat wird deine gespeicherten Profile verwalten",
        "first_name_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> Vorname"
            " wiederhergestellt.\n"
        ),
        "first_name_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> Vorname nicht"
            " gespeichert.\n"
        ),
        "last_name_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> Nachname"
            " wiederhergestellt.\n"
        ),
        "last_name_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> Nachname nicht"
            " gespeichert.\n"
        ),
        "bio_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> Bio wiederhergestellt.\n"
        ),
        "bio_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> Bio nicht gespeichert.\n"
        ),
        "data_not_restored": (
            "<emoji document_id=5312526098750252863>ЁЯЪл</emoji> Vorname nicht"
            " wiederhergestellt.\n<emoji document_id=5312526098750252863>ЁЯЪл</emoji>"
            " Nachname nicht wiederhergestellt.\n<emoji"
            " document_id=5312526098750252863>ЁЯЪл</emoji> Bio nicht wiederhergestellt.\n"
        ),
        "pfp_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> Profilbild"
            " wiederhergestellt."
        ),
        "pfp_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> Profilbild nicht"
            " gespeichert."
        ),
        "_cmd_doc_accsave": "Speichert das Konto f├╝r sp├дtere Verwendung",
        "_cls_doc": "Erm├╢glicht es, schnell zwischen verschiedenen Konten zu wechseln",
    }

    strings_hi = {
        "account_saved": (
            "<emoji document_id=5301255387306009369>ЁЯМЪ</emoji> <b><a"
            ' href="https://t.me/c/{}/{}">рдЦрд╛рддрд╛</a> рд╕рд╣реЗрдЬрд╛ рдЧрдпрд╛!</b>'
        ),
        "restore_btn": "ЁЯСЖ рдкреБрдирд░реНрд╕реНрдерд╛рдкрд┐рдд рдХрд░реЗрдВ",
        "desc": "рдпрд╣ рдЪреИрдЯ рдЖрдкрдХреЗ рд╕рд╣реЗрдЬреЗ рдЧрдП рдкреНрд░реЛрдлрд╛рдЗрд▓ рдХрд╛ рдкреНрд░рдмрдВрдзрди рдХрд░реЗрдЧрд╛",
        "first_name_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> рдкрд╣рд▓рд╛ рдирд╛рдо рдкреБрдирд░реНрд╕реНрдерд╛рдкрд┐рдд"
            " рдХрд┐рдпрд╛ рдЧрдпрд╛ред\n"
        ),
        "first_name_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> рдкрд╣рд▓рд╛ рдирд╛рдо рд╕рд╣реЗрдЬрд╛ рдирд╣реАрдВ"
            " рдЧрдпрд╛ред\n"
        ),
        "last_name_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> рдЕрдВрддрд┐рдо рдирд╛рдо рдкреБрдирд░реНрд╕реНрдерд╛рдкрд┐рдд"
            " рдХрд┐рдпрд╛ рдЧрдпрд╛ред\n"
        ),
        "last_name_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> рдЕрдВрддрд┐рдо рдирд╛рдо рд╕рд╣реЗрдЬрд╛ рдирд╣реАрдВ"
            " рдЧрдпрд╛ред\n"
        ),
        "bio_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> рдмрд╛рдпреЛ рдкреБрдирд░реНрд╕реНрдерд╛рдкрд┐рдд рдХрд┐рдпрд╛"
            " рдЧрдпрд╛ред\n"
        ),
        "bio_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> рдмрд╛рдпреЛ рд╕рд╣реЗрдЬрд╛ рдирд╣реАрдВ рдЧрдпрд╛ред\n"
        ),
        "data_not_restored": (
            "<emoji document_id=5312526098750252863>ЁЯЪл</emoji> рдкрд╣рд▓рд╛ рдирд╛рдо рдкреБрдирд░реНрд╕реНрдерд╛рдкрд┐рдд"
            " рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЧрдпрд╛ред\n<emoji document_id=5312526098750252863>ЁЯЪл</emoji> рдЕрдВрддрд┐рдо"
            " рдирд╛рдо рдкреБрдирд░реНрд╕реНрдерд╛рдкрд┐рдд рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЧрдпрд╛ред\n<emoji"
            " document_id=5312526098750252863>ЁЯЪл</emoji> рдмрд╛рдпреЛ рдкреБрдирд░реНрд╕реНрдерд╛рдкрд┐рдд рдирд╣реАрдВ рдХрд┐рдпрд╛"
            " рдЧрдпрд╛ред\n"
        ),
        "pfp_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдЪрд┐рддреНрд░"
            " рдкреБрдирд░реНрд╕реНрдерд╛рдкрд┐рдд рдХрд┐рдпрд╛ рдЧрдпрд╛ред"
        ),
        "pfp_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдЪрд┐рддреНрд░ рд╕рд╣реЗрдЬрд╛"
            " рдирд╣реАрдВ рдЧрдпрд╛ред"
        ),
        "_cmd_doc_accsave": "рднрд╡рд┐рд╖реНрдп рдХреЗ рдЙрдкрдпреЛрдЧ рдХреЗ рд▓рд┐рдП рдЦрд╛рддрд╛ рд╕рд╣реЗрдЬреЗрдВ",
        "_cls_doc": "рд╡рд┐рднрд┐рдиреНрди рдЦрд╛рддреЛрдВ рдХреЗ рдмреАрдЪ рдЬрд▓реНрджреА рд╕реЗ рдЬрд▓реНрджреА рдмрджрд▓рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рджреЗрддрд╛ рд╣реИ",
    }

    strings_uz = {
        "account_saved": (
            "<emoji document_id=5301255387306009369>ЁЯМЪ</emoji> <b><a"
            ' href="https://t.me/c/{}/{}">Hisob</a> saqlandi!</b>'
        ),
        "restore_btn": "ЁЯСЖ Qayta tiklash",
        "desc": "Bu chat sizning saqlangan profilni boshqaradi",
        "first_name_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> Nomi qayta tiklandi.\n"
        ),
        "first_name_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> Nomi saqlanmadi.\n"
        ),
        "last_name_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> Familiya qayta"
            " tiklandi.\n"
        ),
        "last_name_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> Familiya saqlanmadi.\n"
        ),
        "bio_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> Bio qayta tiklandi.\n"
        ),
        "bio_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> Bio saqlanmadi.\n"
        ),
        "data_not_restored": (
            "<emoji document_id=5312526098750252863>ЁЯЪл</emoji> Nomi qayta"
            " tiklanmadi.\n<emoji document_id=5312526098750252863>ЁЯЪл</emoji> Familiya"
            " qayta tiklanmadi.\n<emoji document_id=5312526098750252863>ЁЯЪл</emoji> Bio"
            " qayta tiklanmadi.\n"
        ),
        "pfp_restored": (
            "<emoji document_id=5314250708508220914>тЬЕ</emoji> Profil rasmi qayta"
            " tiklandi."
        ),
        "pfp_unsaved": (
            "<emoji document_id=5312383351217201533>тЪая╕П</emoji> Profil rasmi saqlanmadi."
        ),
        "_cmd_doc_accsave": "Keyingi ishlatish uchun hisobni saqlash",
        "_cls_doc": "Tez-tez turli hisoblarga o'tishga imkon beradi",
    }

    async def client_ready(self, client, db):
        self._accs_db, is_new = await utils.asset_channel(
            self._client,
            "hikka-acc-switcher",
            self.strings("desc"),
            silent=True,
            archive=True,
            avatar="https://raw.githubusercontent.com/hikariatama/assets/master/hikka-acc-switcher.png",
            _folder="hikka",
        )

        self._accs_db_id = int(f"-100{self._accs_db.id}")

        if not is_new:
            return

        try:
            await self._client(
                InviteToChannelRequest(self._accs_db, [self.inline.bot_username])
            )
        except Exception:
            logger.warning("Unable to invite logger to chat. Maybe he's already there?")

    async def _save_acc(
        self,
        photo: typing.Optional[bytes],
        first_name: str,
        last_name: str,
        bio: str,
        no_retry: bool = False,
    ) -> int:
        info = (
            f"<code>{utils.escape_html(first_name)}</code> "
            f"<code>{utils.escape_html(last_name)}</code>\n\n"
            f"<b>Bio</b>: <code>{utils.escape_html(bio)}</code>\n"
        )

        try:
            if photo is not None:
                photo_io = io.BytesIO(photo)
                photo_io.name = "pfp.jpg"

                return (
                    await self.inline.bot.send_document(
                        self._accs_db_id,
                        photo_io,
                        caption=info,
                        parse_mode="HTML",
                        reply_markup=self.inline.generate_markup(
                            {"text": self.strings("restore_btn"), "data": "accrest"}
                        ),
                    )
                ).message_id
            else:
                return (
                    await self.inline.bot.send_message(
                        self._accs_db_id,
                        info,
                        parse_mode="HTML",
                        reply_markup=self.inline.generate_markup(
                            {"text": self.strings("restore_btn"), "data": "accrest"}
                        ),
                    )
                ).message_id
        except ChatNotFound:
            if no_retry:
                logger.exception("Can't restore account")
                return

            await self._client(
                InviteToChannelRequest(self._accs_db, [self.inline.bot_username])
            )

            return await self._save_acc(
                photo,
                first_name,
                last_name,
                bio,
                no_retry=True,
            )

    async def accrest_callback_handler(self, call: InlineCall):
        if call.data != "accrest":
            return

        await call.answer(await self._restore(call.message), show_alert=True)

    async def accsavecmd(self, message: TelethonMessage):
        """Save account for future restoring"""
        full = await self._client(GetFullUserRequest("me"))
        acc = await self._client.force_get_entity("me")

        message_id = await self._save_acc(
            (
                (await self._client.download_profile_photo(acc, bytes))
                if full.full_user.profile_photo
                else None
            ),
            getattr(acc, "first_name", "None"),
            getattr(acc, "last_name", "None"),
            (getattr(full.full_user, "about", "None")),
        )

        await utils.answer(
            message, self.strings("account_saved").format(self._accs_db.id, message_id)
        )

    async def _restore(
        self,
        reply: typing.Union[TelethonMessage, InlineMessage],
    ) -> str:
        log = ""

        first_name, last_name, bio = list(
            map(
                lambda x: x.replace("&gt;", ">")
                .replace("&lt;", "<")
                .replace("&quot;", '"')
                .replace("&amp;", "&"),
                re.findall(
                    r"<code>(.*?)</code>",
                    getattr(reply, "html_text", reply.text),
                    flags=re.S,
                ),
            )
        )

        if first_name == "None":
            first_name = None

        if last_name == "None":
            last_name = None

        if bio == "None":
            bio = None

        try:
            await self._client(UpdateProfileRequest(first_name, last_name, bio))

            log += (
                self.strings("first_name_restored")
                if first_name
                else self.strings("first_name_unsaved")
            )

            log += (
                self.strings("last_name_restored")
                if last_name
                else self.strings("last_name_unsaved")
            )

            log += self.strings("bio_restored") if bio else self.strings("bio_unsaved")
        except Exception:
            logger.exception("Can't restore account due to")
            log += self.strings("data_not_restored")

        try:
            upload = await self._client.upload_file(
                await self._client.download_file(reply.media, bytes)
            )
            await self._client(UploadProfilePhotoRequest(upload))
            log += self.strings("pfp_restored")
        except Exception:
            try:
                file = io.BytesIO()
                await reply.document.download(destination_file=file)

                await self._client(
                    UploadProfilePhotoRequest(
                        await self._client.upload_file(file),
                    )
                )

                log += self.strings("pfp_restored")
            except Exception:
                log += self.strings("pfp_unsaved")

        return re.sub(r"\n{2,}", "\n", log)
