# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: leomatch
# Author: hikariatama
# Commands:
# Failed to parse
# ---------------------------------------------------------------------------------

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta desc: Simplifies the interaction with @leomatchbot - Rejects slag, allows you to create filters by age, cities, blacklisted words.
# meta pic: https://static.dan.tatar/leomatch_icon.png
# meta banner: https://mods.hikariatama.ru/badges/leomatch.jpg
# meta developer: @hikarimods
# requires: russian-names
# scope: hikka_only
# scope: hikka_min 1.3.0

__version__ = (2, 0, 3)

import asyncio
import logging
import re
import time
from typing import Iterable, Optional

from russian_names import RussianNames
from telethon.tl.types import Message

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class LeomatchMod(loader.Module):
    """Simplifies the interaction with @leomatchbot - Rejects slag, allows you to create filters by age, cities, blacklisted words. Check .config for more info"""

    strings = {"name": "Leomatch"}

    strings_ru = {
        "_cls_doc": (
            "–£–ø—Ä–æ—â–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å @leomatchbot - –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —à–ª–∞–∫, –ø–æ–∑–≤–æ–ª—è–µ—Ç"
            " —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É, –≥–æ—Ä–æ–¥–∞–º, —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Å–ª–æ–≤. –ó–∞–≥–ª—è–Ω–∏ –≤"
            " .config –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        ),
    }

    _last_decline = 0
    _queue = []
    _groups = {}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "min_age",
                0,
                (
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ - –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å"
                    " –≤—Å–µ—Ö, –∫—Ç–æ –º–ª–∞–¥—à–µ"
                ),
                validator=loader.validators.Integer(minimum=0),
            ),
            loader.ConfigValue(
                "max_age",
                100,
                (
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ - –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å"
                    " –≤—Å–µ—Ö, –∫—Ç–æ —Å—Ç–∞—Ä—à–µ"
                ),
                validator=loader.validators.Integer(minimum=0),
            ),
            loader.ConfigValue(
                "blacklist_cities",
                [],
                (
                    "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                    " –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è"
                ),
                validator=loader.validators.Series(),
            ),
            loader.ConfigValue(
                "whitelist_cities",
                [],
                (
                    "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤"
                    " –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è"
                ),
                validator=loader.validators.Series(),
            ),
            loader.ConfigValue(
                "blacklist_words",
                [],
                (
                    "–ï—Å–ª–∏ –≤ –∞–Ω–∫–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–ª–æ–≤–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞, –æ–Ω–∞ –±—É–¥–µ—Ç"
                    " –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                ),
                validator=loader.validators.Series(),
            ),
            loader.ConfigValue(
                "whitelist_words",
                [],
                (
                    "–ï—Å–ª–∏ –≤ –∞–Ω–∫–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –Ω–µ—Ç —Å–ª–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞, –æ–Ω–∞"
                    " –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                ),
                validator=loader.validators.Series(),
            ),
            loader.ConfigValue(
                "decline_slag",
                True,
                "–û—Ç–∫–ª–æ–Ω—è—Ç—å –ª–∏ —à–ª–∞–∫ (–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –¢–∏–∫–¢–æ–∫ –∏ –¥—Ä.)",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "enable",
                True,
                "–í–∫–ª—é—á–∏—Ç—å –ª–∏ –º–æ–¥—É–ª—å",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "minimal_len",
                0,
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –∞–Ω–∫–µ—Ç–µ",
                validator=loader.validators.Integer(minimum=0),
            ),
            loader.ConfigValue(
                "log",
                True,
                "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ª–æ–≥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "delay",
                5,
                "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –∞–Ω–∫–µ—Ç",
                validator=loader.validators.Integer(minimum=3),
            ),
            loader.ConfigValue(
                "no_female",
                False,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –¥–µ–≤—É—à–µ–∫",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "no_male",
                False,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø–∞—Ä–Ω–µ–π",
                validator=loader.validators.Boolean(),
            ),
        )

    async def client_ready(self):
        names = RussianNames()
        await utils.run_sync(names._fill_base)

        self.female_names = map(lambda x: x.lower(), names._base["woman"]["name"])
        self.male_names = map(lambda x: x.lower(), names._base["man"]["name"])

    @loader.loop(interval=1, autostart=True)
    async def loop(self):
        if not self._queue:
            return

        if self._last_decline + self.config["delay"] > time.time():
            await asyncio.sleep(self._last_decline + self.config["delay"] - time.time())

        self._last_decline = time.time()

        log, answer = self._queue.pop(0)

        async with self._client.conversation(1234060895) as conv:
            m = await conv.send_message(answer)
            await conv.get_response()

        await m.delete()

        if self.config["log"] and log:
            logger.info(log)

    async def _decline(
        self,
        message: Message,
        log: Optional[str] = None,
        answer: Optional[str] = "üëé",
    ):
        for m in [message] + (
            [m for m in self._groups[message.grouped_id]]
            if message.grouped_id and message.grouped_id in self._groups
            else []
        ):
            await m.delete()

        self._queue += [(log, answer)]

    @staticmethod
    def _in(needle: str, haystack: Iterable, alter: str) -> bool:
        """
        Checks for occurence of needle in haystack using smart method
        :param needle: string to search for
        :param haystack: iterable to search in
        :param alter: string to search in if needle is not a one word
        :return: True if needle is found in haystack, False otherwise
        """
        return (
            True
            if needle.strip().lower() in map(lambda x: x.lower().strip(), haystack)
            else " " in needle and needle.strip().lower() in alter.lower()
        )

    @loader.watcher(chat_id=1234060895, out=True)
    async def out_watcher(self, _):
        if self._queue:
            self._queue = []
            logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å, —Ç.–∫. —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

    @loader.watcher("in", from_id=1234060895)
    async def watcher(self, message: Message):
        if not self.config["enable"]:
            return

        if (
            "–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –±–æ–ª—å—à–µ" in message.raw_text
            and "–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" not in message.raw_text
        ):
            self._queue = []
            logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å, —Ç.–∫. –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∞–π–∫–∏")
            return

        if message.grouped_id:
            self._groups.setdefault(message.grouped_id, []).append(message)

        if self.config["decline_slag"] and (
            (
                "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –î–∞–π–≤–∏–Ω—á–∏–∫–∞" in message.raw_text
                and "https://t.me/leoday" in message.text
            )
            or (
                "–ë–æ—Ç –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ"
                " –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º"
                in message.raw_text
            )
            or (
                "—Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ TikTok?" in message.raw_text
                and "tiktok.com/tag/–¥–∞–π–≤–∏–Ω—á–∏–∫" in message.raw_text
            )
            or (
                "–ü—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —É–≤–∏–¥–∏—à—å –∞–Ω–∫–µ—Ç—ã —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π"
                in message.raw_text
            )
        ):
            await self._decline(
                message,
                "–û—Ç–∫–ª–æ–Ω–∏–ª –∫–∞–∫–æ–π-—Ç–æ —à–ª–∞–∫",
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç",
            )
            return

        if self.config["decline_slag"] and message.raw_text == "–≠—Ç–æ –≤—Å–µ, –∏–¥–µ–º –¥–∞–ª—å—à–µ?":
            await self._decline(
                message,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç",
                "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã",
            )
            return

        if (
            message.raw_text.count(",") < 2
            or message.raw_text.startswith("–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:")
            or "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è ;) –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è"
            in message.raw_text
        ):
            return

        words = re.sub(
            r" {2,}",
            " ",
            "".join(
                (
                    symbol
                    if symbol
                    in "abcdefghijklmnopqrstuvwxyz—ë–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é1234567890 "
                    else " "
                )
                for symbol in (
                    ""
                    if len(message.raw_text.lower().split(",", maxsplit=2)) < 3
                    or "‚Äì" not in message.raw_text
                    else message.raw_text.lower()
                    .split(",", maxsplit=2)[2]
                    .split("‚Äì")[1]
                )
            ),
        ).split()

        user = (
            message.raw_text.split("‚Äì")[0].strip()
            if "‚Äì" in message.raw_text
            else message.raw_text
        )

        user_name = user.split(",")[0].strip().lower()
        if (
            self.config["no_female"]
            and user_name in self.female_names
            or self.config["no_male"]
            and user_name in self.male_names
        ):
            await self._decline(message, f"{user} –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –ø–æ–ª–∞")

        if self.config["minimal_len"] and len(list(words)) < self.config["minimal_len"]:
            await self._decline(
                message,
                f"{user} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã",
            )
            return

        if (
            self.config["blacklist_cities"]
            and len(message.raw_text.split(",")) >= 3
            and message.raw_text.split(",")[2].split()[0].lower().strip()
            in map(lambda x: x.lower().strip(), self.config["blacklist_cities"])
        ):
            await self._decline(
                message,
                f"{user} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –Ω–∞–ª–∏—á–∏—è –≥–æ—Ä–æ–¥–∞ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ",
            )
            return

        if (
            self.config["whitelist_cities"]
            and len(message.raw_text.split(",")) >= 3
            and message.raw_text.split(",")[2].split()[0].lower().strip()
            not in map(lambda x: x.lower().strip(), self.config["whitelist_cities"])
        ):
            await self._decline(
                message,
                f"{user} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≥–æ—Ä–æ–¥–∞ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ",
            )
            return

        if self.config["blacklist_words"] and any(
            self._in(word, words, message.raw_text)
            for word in self.config["blacklist_words"]
        ):
            await self._decline(message, f"{user} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ —Å–ª–æ–≤ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
            return

        if self.config["whitelist_words"] and not any(
            self._in(word, words, message.raw_text)
            for word in self.config["whitelist_words"]
        ):
            await self._decline(
                message,
                f"{user} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ –∞–Ω–∫–µ—Ç–µ —Å–ª–æ–≤ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞",
            )
            return

        if (
            self.config["min_age"]
            and len(message.raw_text.split(",")) >= 2
            and message.raw_text.split(",")[1].strip().isdigit()
            and int(message.raw_text.split(",")[1].strip()) < self.config["min_age"]
        ):
            await self._decline(message, f"{user} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –º–ª–∞–¥—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞")
            return

        if (
            self.config["max_age"]
            and len(message.raw_text.split(",")) >= 2
            and message.raw_text.split(",")[1].strip().isdigit()
            and int(message.raw_text.split(",")[1].strip()) > self.config["max_age"]
        ):
            await self._decline(message, f"{user} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ —Å—Ç–∞—Ä—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞")
            return
