# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: MyModules
# Author: DziruModules
# Commands:
# .mymodules
# ---------------------------------------------------------------------------------

#
# ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñÄ‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà
# ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñë‚ñà‚ñë
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @dziru
# meta pic: https://raw.githubusercontent.com/DziruModules/assets/master/DziruModules.jpg
# meta banner: https://raw.githubusercontent.com/DziruModules/assets/master/MyModules.png
# scope: hikka_only

import logging

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class MyModulesMod(loader.Module):
    """List of all of the modules currently installed, without all of that annoying crap. In just one simple message!"""

    strings = {
        "name": "MyModules",
        "amount": "‚ù§Ô∏è I have <b>{}</b> modules installed.",
        "modules": "‚ù§Ô∏è Here is all of them:",
    }

    strings_ru = {
        "amount": "‚ù§Ô∏è –£ –º–µ–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <b>{}</b> –º–æ–¥—É–ª–µ–π.",
        "modules": "‚ù§Ô∏è –í—Å–µ –æ–Ω–∏ –∑–¥–µ—Å—å:",
    }

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏")
    async def mymodulescmd(self, message):
        """- List of all of the modules currently installed"""

        result = (
            f"{self.strings('amount').format(str(len(self.allmodules.modules)))}\n{self.strings('modules')} | "
        )

        for mod in self.allmodules.modules:
            try:
                name = mod.strings["name"]
            except KeyError:
                name = mod.__clas__.__name__
            result += f"<code>{name}</code> | "

        await utils.answer(message, result)
