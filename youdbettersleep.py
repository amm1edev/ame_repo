# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: youdbettersleep
# Author: hikariatama
# Commands:
# .sleep
# ---------------------------------------------------------------------------------

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://static.dan.tatar/youdbettersleep_icon.png
# meta banner: https://mods.hikariatama.ru/badges/youdbettersleep.jpg
# meta developer: @hikarimods
# scope: hikka_only
# scope: hikka_min 1.3.0

import re
import time

from telethon.tl.types import Message

from .. import loader, utils


def s2time(temp_time: str) -> int:
    seconds, minutes, hours = 0, 0, 0

    try:
        seconds = int(str(re.search("([0-9]+)s", temp_time).group(1)))
    except Exception:
        pass

    try:
        minutes = int(str(re.search("([0-9]+)m", temp_time).group(1))) * 60
    except Exception:
        pass

    try:
        hours = int(str(re.search("([0-9]+)h", temp_time).group(1))) * 60 * 60
    except Exception:
        pass

    return round(seconds + minutes + hours)


@loader.tds
class YouDBetterSleepMod(loader.Module):
    """Restricts user from sending messages while sleeping"""

    strings = {
        "name": "YouDBetterSleep",
        "no_time": "üö´ <b>You can't sleep forever, specify <time> argument</b>",
        "awake": "ü•± <b>Good morning</b>",
        "asleep": "üò¥ <b>Good night. Now I can't write messages for {}</b>",
        "disabled": (
            "üò¥ <b>I can't write messages, because my userbot wants me to sleep</b>"
        ),
    }

    strings_ru = {
        "no_time": "üëæ <b>–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–ø–∞—Ç—å –≤–µ—á–Ω–æ, —É–∫–∞–∂–∏ –∞—Ä–≥—É–º–µ–Ω—Ç <–≤—Ä–µ–º—è></b>",
        "awake": "ü•± <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ</b>",
        "asleep": (
            "üò¥ <b>–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏. –Ø –Ω–µ –º–æ–≥—É –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {}</b>"
        ),
        "disabled": (
            "üò¥ <b>–Ø –Ω–µ –º–æ–≥—É –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –º–æ–π —é–∑–µ—Ä–±–æ—Ç —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã —è"
            " –ø–æ—Å–ø–∞–ª</b>"
        ),
        "_cls_doc": "–ó–∞–ø—Ä–µ—â–∞–µ—Ç –ø–∏—Å–∞—Ç—å –≤–æ –≤—Ä–µ–º—è —Å–Ω–∞",
    }

    @loader.command(ru_doc="<–≤—Ä–µ–º—è> - –ü–æ—Å–ø–∞—Ç—å")
    async def sleepcmd(self, message: Message):
        """<time> - Sleep for time"""
        args = utils.get_args_raw(message)

        t = s2time(args)

        if not args or t == 0:
            self.set("asleep", False)
            self.get("until", 0)
            await utils.answer(message, self.strings("awake"))
        else:
            self.set("asleep", True)
            self.set("until", t + time.time())
            await utils.answer(message, self.strings("asleep").format(args))

    @loader.tag("only_messages", "no_commands")
    async def watcher(self, message: Message):
        if not self.get("asleep", False) or not self.get("until", False):
            return

        if self.get("until", 0) <= time.time():
            self.set("until", 0)
            self.set("asleep", False)
            await self.inline.bot.send_message(
                self._tg_id,
                self.strings("awake"),
                parse_mode="HTML",
            )
            return

        if message.mentioned:
            await self._client.send_read_acknowledge(
                message.peer_id,
                message,
                clear_mentions=True,
            )
            await utils.answer(message, self.strings("disabled"))

        if message.out:
            await utils.answer(message, self.strings("disabled"))
