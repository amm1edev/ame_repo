# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: craiyon
# Author: hikariatama
# Commands:
# .craiyon
# ---------------------------------------------------------------------------------

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#
#          https://t.me/hikariatama
#
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://static.dan.tatar/craiyon_icon.png
# meta banner: https://mods.hikariatama.ru/badges/craiyon.jpg
# meta developer: @hikarimods
# scope: hikka_only
# scope: hikka_min 1.2.10

import base64

import requests
from telethon.tl.types import Message

from .. import loader, utils


@loader.tds
class CrAIyonMod(loader.Module):
    """Generates images by description using Craiyon AI (DALL-E)"""

    strings = {
        "name": "CrAIyon",
        "args": "üö´ <b>No photo description specified</b>",
        "generating": (
            "üñå <b>Drawing request </b><code>{}</code><b> using craiyon. Be patient,"
            " this takes some time</b>"
        ),
        "error": "üö´ <b>I can't draw </b><code>{}</code>",
        "drawing": "üñå <b>This is delicious </b><code>{}</code>",
    }

    strings_ru = {
        "args": "üö´ <b>–ù–µ —É–∫–∞–∑–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>",
        "generating": (
            "üñå <b>–†–∏—Å—É—é –∑–∞–ø—Ä–æ—Å </b><code>{}</code><b> —á–µ—Ä–µ–∑ craiyon. –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã,"
            " —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è</b>"
        ),
        "error": "üö´ <b>–Ø –Ω–µ –º–æ–≥—É –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å </b><code>{}</code>",
        "drawing": "üñå <b>–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω—ã–π </b><code>{}</code>",
        "_cmd_doc_craiyon": (
            "<–æ–ø–∏—Å–∞–Ω–∏–µ> - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å –ø–æ–º–æ—â—å—é Craiyon AI"
            " (DALL-E)"
        ),
        "_cls_doc": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å –ø–æ–º–æ—â—å—é Craiyon AI (DALL-E)",
    }

    strings_de = {
        "args": "üö´ <b>Keine Bildbeschreibung angegeben</b>",
        "generating": (
            "üñå <b>Zeichne Anfrage </b><code>{}</code><b> mit craiyon. Sei geduldig,"
            " das dauert ein wenig</b>"
        ),
        "error": "üö´ <b>Kann nicht zeichnen </b><code>{}</code>",
        "drawing": "üñå <b>Das ist lecker </b><code>{}</code>",
        "_cmd_doc_craiyon": (
            "<Beschreibung> - Generiert ein Bild nach Beschreibung mit Craiyon AI"
            " (DALL-E)"
        ),
        "_cls_doc": "Generiert Bilder nach Beschreibung mit Craiyon AI (DALL-E)",
    }

    strings_hi = {
        "args": "üö´ <b>‡§ï‡•ã‡§à ‡§´‡•ã‡§ü‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§®‡§ø‡§∞‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ</b>",
        "generating": (
            "üñå <b>craiyon ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∞‡§ö‡§®‡§æ </b><code>{}</code><b>‡•§ ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç,"
            " ‡§Ø‡§π ‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§Ø ‡§≤‡•á‡§§‡§æ ‡§π‡•à</b>"
        ),
        "error": "üö´ <b>‡§Æ‡•à‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§ø‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡§æ </b><code>{}</code>",
        "drawing": "üñå <b>‡§Ø‡§π ‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§ ‡§π‡•à </b><code>{}</code>",
        "_cmd_doc_craiyon": (
            "<‡§µ‡§ø‡§µ‡§∞‡§£> - Craiyon AI (DALL-E) ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§è‡§ï ‡§õ‡§µ‡§ø ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§®"
            " ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"
        ),
        "_cls_doc": (
            "Craiyon AI (DALL-E) ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§õ‡§µ‡§ø‡§Ø‡§æ‡§Ç ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"
        ),
    }

    strings_uz = {
        "args": "üö´ <b>Rasm tavsifi ko'rsatilmadi</b>",
        "generating": (
            "üñå <b>craiyon orqali so'rovni chizish </b><code>{}</code><b>."
            " Sabr qiling, bu bir necha vaqt oladi</b>"
        ),
        "error": "üö´ <b>Rasmni chizib bo'lmadi </b><code>{}</code>",
        "drawing": "üñå <b>Bu juda yaxshi </b><code>{}</code>",
        "_cmd_doc_craiyon": (
            "<tavsif> - Craiyon AI (DALL-E) orqali tavsifga mos rasm yaratadi"
        ),
        "_cls_doc": "Craiyon AI (DALL-E) orqali tavsifga mos rasmlar yaratadi",
    }

    strings_tr = {
        "args": "üö´ <b>Fotoƒüraf a√ßƒ±klamasƒ± belirtilmedi</b>",
        "generating": (
            "üñå <b>craiyon ile istek √ßizimi </b><code>{}</code><b>."
            " Sabƒ±rlƒ± olun, bu biraz zaman alƒ±r</b>"
        ),
        "error": "üö´ <b>√áizemiyorum </b><code>{}</code>",
        "drawing": "üñå <b>Bu lezzetli </b><code>{}</code>",
        "_cmd_doc_craiyon": (
            "<a√ßƒ±klama> - Craiyon AI (DALL-E) kullanarak a√ßƒ±klamaya g√∂re bir resim"
            " olu≈üturun"
        ),
        "_cls_doc": "Craiyon AI (DALL-E) kullanarak a√ßƒ±klamaya g√∂re resimler olu≈üturur",
    }

    async def craiyoncmd(self, message: Message):
        """<description> - Generate an image by description using Craiyon AI (DALL-E)"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("args"))
            return

        form = await self.inline.form(
            self.strings("generating").format(utils.escape_html(args)),
            message=message,
            gif="https://pa1.narvii.com/6074/b2f0163e5dd1ff7ee6582e1e032eb906b25228ac_hq.gif",
            silent=True,
            reply_markup={"text": "üßë‚Äçüé® Drawing...", "data": "empty"},
            ttl=24 * 60 * 60,
        )

        result = (
            await utils.run_sync(
                requests.post,
                "https://backend.craiyon.com/generate",
                json={"prompt": args},
                headers={
                    "accept": "application/json",
                    "accept-encoding": "gzip, deflate, br",
                    "accept-language": "en-US,en;q=0.9,ru;q=0.8",
                    "content-type": "application/json",
                    "origin": "https://www.craiyon.com",
                    "referer": "https://www.craiyon.com/",
                    "user-agent": (
                        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                        " (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
                    ),
                },
            )
        ).json()

        if not result.get("images"):
            await form.edit(
                self.strings("error").format(args),
                reply_markup=None,
                gif="https://data.whicdn.com/images/61134119/original.gif",
            )
            return

        images = [base64.b64decode(i.encode()) for i in result["images"]]
        await message.respond(self.strings("drawing").format(args), file=images)
        await form.delete()
