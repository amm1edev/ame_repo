# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: MeowMail
# Description: Big updated news sender. idea by @shadow_modules
# Author: skillzmeow
# Commands:
# .news | .settext
# ---------------------------------------------------------------------------------


__version__ = (0, 0, 1)
# module by:
# ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñë‚ñë‚ÄÉ‚ñà‚ñë‚ñë‚ÄÉ‚ñÄ‚ñà
# ‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÑ

from asyncio import sleep

from telethon.tl.types import Message

# ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ñë‚ñà
# ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ
#   you can edit this module
#            2022
# üîí Licensed under the AGPL-3.0
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# meta developer: @smeowcodes
# meta pic: https://siasky.net/XACW0K6mdI6W6tUiG4lEhxfy49KpLHAN-tRPmCsWcAOCnw
# meta banner: https://siasky.net/fAMEML097T4v2x8Zh27F2vzFI2SXs7ezO48tQxoTfodxfA
from .. import loader, utils


class MeowMailMod(loader.Module):
    """big updated news sender. idea by @shadow_modules"""

    strings = {
        "name": "MeowMail",
        "sep": (
            "2 comma-separated arguments. the first is the delay between messages in"
            " seconds, the second is the number of repetitions."
        ),
        "args_inc": "<b>üö® Arguments are incorrect.</b>",
        "not_set": "<b>‚ùóÔ∏è Text not set! Use .settext</b>",
        "activated": (
            "<b>‚ö°Ô∏è The text is set. Use the .news command to start the newsletter."
            " Don't forget to use the config!\n‚úèÔ∏è Text:</b> <code>{}</code>"
        ),
        "news": (
            "<b>üòâ The mailing has started. You can find the defined chats in the"
            " config.</b>"
        ),
    }

    strings_ru = {
        "sep": (
            "2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ø–µ—Ä–≤—ã–º –∏–¥–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤"
            " —Å–µ–∫—É–Ω–¥–∞—Ö, –≤—Ç–æ—Ä—ã–º –∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤"
        ),
        "args_inc": "<b>üö® –ê—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.",
        "not_set": "<b>‚ùóÔ∏è –¢–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .settext</b>",
        "activated": (
            "<b>‚ö°Ô∏è –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .news —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É. –ù–µ"
            " –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –∫–æ–Ω—Ñ–∏–≥!\n‚úèÔ∏è –¢–µ–∫—Å—Ç:</b> <code>{}</code>"
        ),
        "news": "<b>üòâ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ó–∞–¥–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ.</b>",
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "Chats",
                [],
                lambda: "Chat for newsletter",
                validator=loader.validators.Series(
                    validator=loader.validators.Union(
                        loader.validators.TelegramID(),
                        loader.validators.RegExp("^@[a-zA-Z0-9_]{1,32}$"),
                    ),
                ),
            ),
            loader.ConfigValue(
                "NewsSettings",
                "600, 5",
                lambda: self.strings("sep"),
            ),
        )

    async def newscmd(self, message: Message):
        "start a newsletter"
        status = self.db.get("meowmail", "status", "")
        settings = self.config["NewsSettings"]
        text = self.db.get("meowmail", "text", "")
        if text:
            await utils.answer(message, self.strings("news"))
            for x in range(int(settings[1])):
                for chat in self.config["Chats"]:
                    await self.client.send_message(chat, text)
                await sleep(int(settings[0]))
        else:
            await utils.answer(message, self.strings("not_set"))

    async def settextcmd(self, message: Message):
        "<text>, .config meowmail -> NewsSettings"
        args = utils.get_args_raw(message)
        if args:
            self.db.set("meowmail", "text", args)
            await utils.answer(message, self.strings("activated").format(args))
        else:
            await utils.answer(message, self.strings("args_inc"))
